(function(a, b) {
    if (typeof define === "function" && define.amd) {
        define(b);
    } else if (typeof exports === "object") {
        module.exports = b(require, exports, module);
    } else {
        a.Tether = b();
    }
})(this, function(a, b, c) {
    "use strict";
    var d = function() {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || false;
                d.configurable = true;
                if ("value" in d) d.writable = true;
                Object.defineProperty(a, d.key, d);
            }
        }
        return function(b, c, d) {
            if (c) a(b.prototype, c);
            if (d) a(b, d);
            return b;
        };
    }();
    function e(a, b) {
        if (!(a instanceof b)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    var f = undefined;
    if (typeof f === "undefined") {
        f = {
            modules: []
        };
    }
    function g(a) {
        var b = getComputedStyle(a) || {};
        var c = b.position;
        var d = [];
        if (c === "fixed") {
            return [ a ];
        }
        var e = a;
        while (e = e.parentNode) {
            var f = undefined;
            try {
                f = getComputedStyle(e);
            } catch (g) {}
            if (typeof f === "undefined" || f === null) {
                d.push(e);
                return d;
            }
            var h = f;
            var i = h.overflow;
            var j = h.overflowX;
            var k = h.overflowY;
            if (/(auto|scroll)/.test(i + k + j)) {
                if (c !== "absolute" || [ "relative", "absolute", "fixed" ].indexOf(f.position) >= 0) {
                    d.push(e);
                }
            }
        }
        d.push(document.body);
        return d;
    }
    var h = function() {
        var a = 0;
        return function() {
            return ++a;
        };
    }();
    var i = {};
    var j = function S(a) {
        var b = a._tetherZeroElement;
        if (typeof b === "undefined") {
            b = a.createElement("div");
            b.setAttribute("data-tether-id", h());
            n(b.style, {
                top: 0,
                left: 0,
                position: "absolute"
            });
            a.body.appendChild(b);
            a._tetherZeroElement = b;
        }
        var c = b.getAttribute("data-tether-id");
        if (typeof i[c] === "undefined") {
            i[c] = {};
            var d = b.getBoundingClientRect();
            for (var e in d) {
                i[c][e] = d[e];
            }
            v(function() {
                delete i[c];
            });
        }
        return i[c];
    };
    function k(a) {
        var b = undefined;
        if (a === document) {
            b = document;
            a = document.documentElement;
        } else {
            b = a.ownerDocument;
        }
        var c = b.documentElement;
        var d = {};
        var e = a.getBoundingClientRect();
        for (var f in e) {
            d[f] = e[f];
        }
        var g = j(b);
        d.top -= g.top;
        d.left -= g.left;
        if (typeof d.width === "undefined") {
            d.width = document.body.scrollWidth - d.left - d.right;
        }
        if (typeof d.height === "undefined") {
            d.height = document.body.scrollHeight - d.top - d.bottom;
        }
        d.top = d.top - c.clientTop;
        d.left = d.left - c.clientLeft;
        d.right = b.body.clientWidth - d.width - d.left;
        d.bottom = b.body.clientHeight - d.height - d.top;
        return d;
    }
    function l(a) {
        return a.offsetParent || document.documentElement;
    }
    function m() {
        var a = document.createElement("div");
        a.style.width = "100%";
        a.style.height = "200px";
        var b = document.createElement("div");
        n(b.style, {
            position: "absolute",
            top: 0,
            left: 0,
            pointerEvents: "none",
            visibility: "hidden",
            width: "200px",
            height: "150px",
            overflow: "hidden"
        });
        b.appendChild(a);
        document.body.appendChild(b);
        var c = a.offsetWidth;
        b.style.overflow = "scroll";
        var d = a.offsetWidth;
        if (c === d) {
            d = b.clientWidth;
        }
        document.body.removeChild(b);
        var e = c - d;
        return {
            width: e,
            height: e
        };
    }
    function n() {
        var a = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var b = [];
        Array.prototype.push.apply(b, arguments);
        b.slice(1).forEach(function(b) {
            if (b) {
                for (var c in b) {
                    if ({}.hasOwnProperty.call(b, c)) {
                        a[c] = b[c];
                    }
                }
            }
        });
        return a;
    }
    function o(a, b) {
        if (typeof a.classList !== "undefined") {
            b.split(" ").forEach(function(b) {
                if (b.trim()) {
                    a.classList.remove(b);
                }
            });
        } else {
            var c = new RegExp("(^| )" + b.split(" ").join("|") + "( |$)", "gi");
            var d = r(a).replace(c, " ");
            s(a, d);
        }
    }
    function p(a, b) {
        if (typeof a.classList !== "undefined") {
            b.split(" ").forEach(function(b) {
                if (b.trim()) {
                    a.classList.add(b);
                }
            });
        } else {
            o(a, b);
            var c = r(a) + (" " + b);
            s(a, c);
        }
    }
    function q(a, b) {
        if (typeof a.classList !== "undefined") {
            return a.classList.contains(b);
        }
        var c = r(a);
        return new RegExp("(^| )" + b + "( |$)", "gi").test(c);
    }
    function r(a) {
        if (a.className instanceof SVGAnimatedString) {
            return a.className.baseVal;
        }
        return a.className;
    }
    function s(a, b) {
        a.setAttribute("class", b);
    }
    function t(a, b, c) {
        c.forEach(function(c) {
            if (b.indexOf(c) === -1 && q(a, c)) {
                o(a, c);
            }
        });
        b.forEach(function(b) {
            if (!q(a, b)) {
                p(a, b);
            }
        });
    }
    var u = [];
    var v = function T(a) {
        u.push(a);
    };
    var w = function U() {
        var a = undefined;
        while (a = u.pop()) {
            a();
        }
    };
    var x = function() {
        function a() {
            e(this, a);
        }
        d(a, [ {
            key: "on",
            value: function b(a, c, d) {
                var e = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                if (typeof this.bindings === "undefined") {
                    this.bindings = {};
                }
                if (typeof this.bindings[a] === "undefined") {
                    this.bindings[a] = [];
                }
                this.bindings[a].push({
                    handler: c,
                    ctx: d,
                    once: e
                });
            }
        }, {
            key: "once",
            value: function c(a, b, d) {
                this.on(a, b, d, true);
            }
        }, {
            key: "off",
            value: function f(a, b) {
                if (typeof this.bindings !== "undefined" && typeof this.bindings[a] !== "undefined") {
                    return;
                }
                if (typeof b === "undefined") {
                    delete this.bindings[a];
                } else {
                    var c = 0;
                    while (c < this.bindings[a].length) {
                        if (this.bindings[a][c].handler === b) {
                            this.bindings[a].splice(c, 1);
                        } else {
                            ++c;
                        }
                    }
                }
            }
        }, {
            key: "trigger",
            value: function g(a) {
                if (typeof this.bindings !== "undefined" && this.bindings[a]) {
                    var b = 0;
                    for (var c = arguments.length, d = Array(c > 1 ? c - 1 : 0), e = 1; e < c; e++) {
                        d[e - 1] = arguments[e];
                    }
                    while (b < this.bindings[a].length) {
                        var f = this.bindings[a][b];
                        var g = f.handler;
                        var h = f.ctx;
                        var i = f.once;
                        var j = h;
                        if (typeof j === "undefined") {
                            j = this;
                        }
                        g.apply(j, d);
                        if (i) {
                            this.bindings[a].splice(b, 1);
                        } else {
                            ++b;
                        }
                    }
                }
            }
        } ]);
        return a;
    }();
    f.Utils = {
        getScrollParents: g,
        getBounds: k,
        getOffsetParent: l,
        extend: n,
        addClass: p,
        removeClass: o,
        hasClass: q,
        updateClasses: t,
        defer: v,
        flush: w,
        uniqueId: h,
        Evented: x,
        getScrollBarSize: m
    };
    "use strict";
    var y = function() {
        function a(a, b) {
            var c = [];
            var d = true;
            var e = false;
            var f = undefined;
            try {
                for (var g = a[Symbol.iterator](), h; !(d = (h = g.next()).done); d = true) {
                    c.push(h.value);
                    if (b && c.length === b) break;
                }
            } catch (i) {
                e = true;
                f = i;
            } finally {
                try {
                    if (!d && g["return"]) g["return"]();
                } finally {
                    if (e) throw f;
                }
            }
            return c;
        }
        return function(b, c) {
            if (Array.isArray(b)) {
                return b;
            } else if (Symbol.iterator in Object(b)) {
                return a(b, c);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    var d = function() {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || false;
                d.configurable = true;
                if ("value" in d) d.writable = true;
                Object.defineProperty(a, d.key, d);
            }
        }
        return function(b, c, d) {
            if (c) a(b.prototype, c);
            if (d) a(b, d);
            return b;
        };
    }();
    function e(a, b) {
        if (!(a instanceof b)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    if (typeof f === "undefined") {
        throw new Error("You must include the utils.js file before tether.js");
    }
    var z = f.Utils;
    var g = z.getScrollParents;
    var k = z.getBounds;
    var l = z.getOffsetParent;
    var n = z.extend;
    var p = z.addClass;
    var o = z.removeClass;
    var t = z.updateClasses;
    var v = z.defer;
    var w = z.flush;
    var m = z.getScrollBarSize;
    function A(a, b) {
        var c = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
        return a + c >= b && b >= a - c;
    }
    var B = function() {
        if (typeof document === "undefined") {
            return "";
        }
        var a = document.createElement("div");
        var b = [ "transform", "webkitTransform", "OTransform", "MozTransform", "msTransform" ];
        for (var c = 0; c < b.length; ++c) {
            var d = b[c];
            if (a.style[d] !== undefined) {
                return d;
            }
        }
    }();
    var C = [];
    var D = function V() {
        C.forEach(function(a) {
            a.position(false);
        });
        w();
    };
    function E() {
        if (typeof performance !== "undefined" && typeof performance.now !== "undefined") {
            return performance.now();
        }
        return +new Date();
    }
    (function() {
        var a = null;
        var b = null;
        var c = null;
        var d = function e() {
            if (typeof b !== "undefined" && b > 16) {
                b = Math.min(b - 16, 250);
                c = setTimeout(e, 250);
                return;
            }
            if (typeof a !== "undefined" && E() - a < 10) {
                return;
            }
            if (typeof c !== "undefined") {
                clearTimeout(c);
                c = null;
            }
            a = E();
            D();
            b = E() - a;
        };
        if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
            [ "resize", "scroll", "touchmove" ].forEach(function(a) {
                window.addEventListener(a, d);
            });
        }
    })();
    var F = {
        center: "center",
        left: "right",
        right: "left"
    };
    var G = {
        middle: "middle",
        top: "bottom",
        bottom: "top"
    };
    var H = {
        top: 0,
        left: 0,
        middle: "50%",
        center: "50%",
        bottom: "100%",
        right: "100%"
    };
    var I = function W(a, b) {
        var c = a.left;
        var d = a.top;
        if (c === "auto") {
            c = F[b.left];
        }
        if (d === "auto") {
            d = G[b.top];
        }
        return {
            left: c,
            top: d
        };
    };
    var J = function X(a) {
        var b = a.left;
        var c = a.top;
        if (typeof H[a.left] !== "undefined") {
            b = H[a.left];
        }
        if (typeof H[a.top] !== "undefined") {
            c = H[a.top];
        }
        return {
            left: b,
            top: c
        };
    };
    function K() {
        var a = {
            top: 0,
            left: 0
        };
        for (var b = arguments.length, c = Array(b), d = 0; d < b; d++) {
            c[d] = arguments[d];
        }
        c.forEach(function(b) {
            var c = b.top;
            var d = b.left;
            if (typeof c === "string") {
                c = parseFloat(c, 10);
            }
            if (typeof d === "string") {
                d = parseFloat(d, 10);
            }
            a.top += c;
            a.left += d;
        });
        return a;
    }
    function L(a, b) {
        if (typeof a.left === "string" && a.left.indexOf("%") !== -1) {
            a.left = parseFloat(a.left, 10) / 100 * b.width;
        }
        if (typeof a.top === "string" && a.top.indexOf("%") !== -1) {
            a.top = parseFloat(a.top, 10) / 100 * b.height;
        }
        return a;
    }
    var M = function Y(a) {
        var b = a.split(" ");
        var c = y(b, 2);
        var d = c[0];
        var e = c[1];
        return {
            top: d,
            left: e
        };
    };
    var N = M;
    var O = function() {
        function a(b) {
            var c = this;
            e(this, a);
            this.position = this.position.bind(this);
            C.push(this);
            this.history = [];
            this.setOptions(b, false);
            f.modules.forEach(function(a) {
                if (typeof a.initialize !== "undefined") {
                    a.initialize.call(c);
                }
            });
            this.position();
        }
        d(a, [ {
            key: "getClass",
            value: function b() {
                var a = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                var b = this.options.classes;
                if (typeof b !== "undefined" && b[a]) {
                    return this.options.classes[a];
                } else if (this.options.classPrefix) {
                    return this.options.classPrefix + "-" + a;
                } else {
                    return a;
                }
            }
        }, {
            key: "setOptions",
            value: function c(a) {
                var b = this;
                var c = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                var d = {
                    offset: "0 0",
                    targetOffset: "0 0",
                    targetAttachment: "auto auto",
                    classPrefix: "tether"
                };
                this.options = n(d, a);
                var e = this.options;
                var f = e.element;
                var h = e.target;
                var i = e.targetModifier;
                this.element = f;
                this.target = h;
                this.targetModifier = i;
                if (this.target === "viewport") {
                    this.target = document.body;
                    this.targetModifier = "visible";
                } else if (this.target === "scroll-handle") {
                    this.target = document.body;
                    this.targetModifier = "scroll-handle";
                }
                [ "element", "target" ].forEach(function(a) {
                    if (typeof b[a] === "undefined") {
                        throw new Error("Tether Error: Both element and target must be defined");
                    }
                    if (typeof b[a].jquery !== "undefined") {
                        b[a] = b[a][0];
                    } else if (typeof b[a] === "string") {
                        b[a] = document.querySelector(b[a]);
                    }
                });
                p(this.element, this.getClass("element"));
                if (!(this.options.addTargetClasses === false)) {
                    p(this.target, this.getClass("target"));
                }
                if (!this.options.attachment) {
                    throw new Error("Tether Error: You must provide an attachment");
                }
                this.targetAttachment = N(this.options.targetAttachment);
                this.attachment = N(this.options.attachment);
                this.offset = M(this.options.offset);
                this.targetOffset = M(this.options.targetOffset);
                if (typeof this.scrollParents !== "undefined") {
                    this.disable();
                }
                if (this.targetModifier === "scroll-handle") {
                    this.scrollParents = [ this.target ];
                } else {
                    this.scrollParents = g(this.target);
                }
                if (!(this.options.enabled === false)) {
                    this.enable(c);
                }
            }
        }, {
            key: "getTargetBounds",
            value: function h() {
                if (typeof this.targetModifier !== "undefined") {
                    if (this.targetModifier === "visible") {
                        if (this.target === document.body) {
                            return {
                                top: pageYOffset,
                                left: pageXOffset,
                                height: innerHeight,
                                width: innerWidth
                            };
                        } else {
                            var a = k(this.target);
                            var b = {
                                height: a.height,
                                width: a.width,
                                top: a.top,
                                left: a.left
                            };
                            b.height = Math.min(b.height, a.height - (pageYOffset - a.top));
                            b.height = Math.min(b.height, a.height - (a.top + a.height - (pageYOffset + innerHeight)));
                            b.height = Math.min(innerHeight, b.height);
                            b.height -= 2;
                            b.width = Math.min(b.width, a.width - (pageXOffset - a.left));
                            b.width = Math.min(b.width, a.width - (a.left + a.width - (pageXOffset + innerWidth)));
                            b.width = Math.min(innerWidth, b.width);
                            b.width -= 2;
                            if (b.top < pageYOffset) {
                                b.top = pageYOffset;
                            }
                            if (b.left < pageXOffset) {
                                b.left = pageXOffset;
                            }
                            return b;
                        }
                    } else if (this.targetModifier === "scroll-handle") {
                        var a = undefined;
                        var c = this.target;
                        if (c === document.body) {
                            c = document.documentElement;
                            a = {
                                left: pageXOffset,
                                top: pageYOffset,
                                height: innerHeight,
                                width: innerWidth
                            };
                        } else {
                            a = k(c);
                        }
                        var d = getComputedStyle(c);
                        var e = c.scrollWidth > c.clientWidth || [ d.overflow, d.overflowX ].indexOf("scroll") >= 0 || this.target !== document.body;
                        var f = 0;
                        if (e) {
                            f = 15;
                        }
                        var g = a.height - parseFloat(d.borderTopWidth) - parseFloat(d.borderBottomWidth) - f;
                        var b = {
                            width: 15,
                            height: g * .975 * (g / c.scrollHeight),
                            left: a.left + a.width - parseFloat(d.borderLeftWidth) - 15
                        };
                        var h = 0;
                        if (g < 408 && this.target === document.body) {
                            h = -11e-5 * Math.pow(g, 2) - .00727 * g + 22.58;
                        }
                        if (this.target !== document.body) {
                            b.height = Math.max(b.height, 24);
                        }
                        var i = this.target.scrollTop / (c.scrollHeight - g);
                        b.top = i * (g - b.height - h) + a.top + parseFloat(d.borderTopWidth);
                        if (this.target === document.body) {
                            b.height = Math.max(b.height, 24);
                        }
                        return b;
                    }
                } else {
                    return k(this.target);
                }
            }
        }, {
            key: "clearCache",
            value: function i() {
                this._cache = {};
            }
        }, {
            key: "cache",
            value: function j(a, b) {
                if (typeof this._cache === "undefined") {
                    this._cache = {};
                }
                if (typeof this._cache[a] === "undefined") {
                    this._cache[a] = b.call(this);
                }
                return this._cache[a];
            }
        }, {
            key: "enable",
            value: function q() {
                var a = this;
                var b = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                if (!(this.options.addTargetClasses === false)) {
                    p(this.target, this.getClass("enabled"));
                }
                p(this.element, this.getClass("enabled"));
                this.enabled = true;
                this.scrollParents.forEach(function(b) {
                    if (b !== document) {
                        b.addEventListener("scroll", a.position);
                    }
                });
                if (b) {
                    this.position();
                }
            }
        }, {
            key: "disable",
            value: function r() {
                var a = this;
                o(this.target, this.getClass("enabled"));
                o(this.element, this.getClass("enabled"));
                this.enabled = false;
                if (typeof this.scrollParents !== "undefined") {
                    this.scrollParents.forEach(function(b) {
                        b.removeEventListener("scroll", a.position);
                    });
                }
            }
        }, {
            key: "destroy",
            value: function s() {
                var a = this;
                this.disable();
                C.forEach(function(b, c) {
                    if (b === a) {
                        C.splice(c, 1);
                        return;
                    }
                });
            }
        }, {
            key: "updateAttachClasses",
            value: function u(a, b) {
                var c = this;
                a = a || this.attachment;
                b = b || this.targetAttachment;
                var d = [ "left", "top", "bottom", "right", "middle", "center" ];
                if (typeof this._addAttachClasses !== "undefined" && this._addAttachClasses.length) {
                    this._addAttachClasses.splice(0, this._addAttachClasses.length);
                }
                if (typeof this._addAttachClasses === "undefined") {
                    this._addAttachClasses = [];
                }
                var e = this._addAttachClasses;
                if (a.top) {
                    e.push(this.getClass("element-attached") + "-" + a.top);
                }
                if (a.left) {
                    e.push(this.getClass("element-attached") + "-" + a.left);
                }
                if (b.top) {
                    e.push(this.getClass("target-attached") + "-" + b.top);
                }
                if (b.left) {
                    e.push(this.getClass("target-attached") + "-" + b.left);
                }
                var f = [];
                d.forEach(function(a) {
                    f.push(c.getClass("element-attached") + "-" + a);
                    f.push(c.getClass("target-attached") + "-" + a);
                });
                v(function() {
                    if (!(typeof c._addAttachClasses !== "undefined")) {
                        return;
                    }
                    t(c.element, c._addAttachClasses, f);
                    if (!(c.options.addTargetClasses === false)) {
                        t(c.target, c._addAttachClasses, f);
                    }
                    delete c._addAttachClasses;
                });
            }
        }, {
            key: "position",
            value: function x() {
                var a = this;
                var b = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                if (!this.enabled) {
                    return;
                }
                this.clearCache();
                var c = I(this.targetAttachment, this.attachment);
                this.updateAttachClasses(this.attachment, c);
                var d = this.cache("element-bounds", function() {
                    return k(a.element);
                });
                var e = d.width;
                var g = d.height;
                if (e === 0 && g === 0 && typeof this.lastSize !== "undefined") {
                    var h = this.lastSize;
                    e = h.width;
                    g = h.height;
                } else {
                    this.lastSize = {
                        width: e,
                        height: g
                    };
                }
                var i = this.cache("target-bounds", function() {
                    return a.getTargetBounds();
                });
                var j = i;
                var n = L(J(this.attachment), {
                    width: e,
                    height: g
                });
                var o = L(J(c), j);
                var p = L(this.offset, {
                    width: e,
                    height: g
                });
                var q = L(this.targetOffset, j);
                n = K(n, p);
                o = K(o, q);
                var r = i.left + o.left - n.left;
                var s = i.top + o.top - n.top;
                for (var t = 0; t < f.modules.length; ++t) {
                    var u = f.modules[t];
                    var v = u.position.call(this, {
                        left: r,
                        top: s,
                        targetAttachment: c,
                        targetPos: i,
                        elementPos: d,
                        offset: n,
                        targetOffset: o,
                        manualOffset: p,
                        manualTargetOffset: q,
                        scrollbarSize: y,
                        attachment: this.attachment
                    });
                    if (v === false) {
                        return false;
                    } else if (typeof v === "undefined" || typeof v !== "object") {
                        continue;
                    } else {
                        s = v.top;
                        r = v.left;
                    }
                }
                var x = {
                    page: {
                        top: s,
                        left: r
                    },
                    viewport: {
                        top: s - pageYOffset,
                        bottom: pageYOffset - s - g + innerHeight,
                        left: r - pageXOffset,
                        right: pageXOffset - r - e + innerWidth
                    }
                };
                var y = undefined;
                if (document.body.scrollWidth > window.innerWidth) {
                    y = this.cache("scrollbar-size", m);
                    x.viewport.bottom -= y.height;
                }
                if (document.body.scrollHeight > window.innerHeight) {
                    y = this.cache("scrollbar-size", m);
                    x.viewport.right -= y.width;
                }
                if ([ "", "static" ].indexOf(document.body.style.position) === -1 || [ "", "static" ].indexOf(document.body.parentElement.style.position) === -1) {
                    x.page.bottom = document.body.scrollHeight - s - g;
                    x.page.right = document.body.scrollWidth - r - e;
                }
                if (typeof this.options.optimizations !== "undefined" && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== "undefined")) {
                    (function() {
                        var b = a.cache("target-offsetparent", function() {
                            return l(a.target);
                        });
                        var c = a.cache("target-offsetparent-bounds", function() {
                            return k(b);
                        });
                        var d = getComputedStyle(b);
                        var e = c;
                        var f = {};
                        [ "Top", "Left", "Bottom", "Right" ].forEach(function(a) {
                            f[a.toLowerCase()] = parseFloat(d["border" + a + "Width"]);
                        });
                        c.right = document.body.scrollWidth - c.left - e.width + f.right;
                        c.bottom = document.body.scrollHeight - c.top - e.height + f.bottom;
                        if (x.page.top >= c.top + f.top && x.page.bottom >= c.bottom) {
                            if (x.page.left >= c.left + f.left && x.page.right >= c.right) {
                                var g = b.scrollTop;
                                var h = b.scrollLeft;
                                x.offset = {
                                    top: x.page.top - c.top + g - f.top,
                                    left: x.page.left - c.left + h - f.left
                                };
                            }
                        }
                    })();
                }
                this.move(x);
                this.history.unshift(x);
                if (this.history.length > 3) {
                    this.history.pop();
                }
                if (b) {
                    w();
                }
                return true;
            }
        }, {
            key: "move",
            value: function y(a) {
                var b = this;
                if (!(typeof this.element.parentNode !== "undefined")) {
                    return;
                }
                var c = {};
                for (var d in a) {
                    c[d] = {};
                    for (var e in a[d]) {
                        var f = false;
                        for (var g = 0; g < this.history.length; ++g) {
                            var h = this.history[g];
                            if (typeof h[d] !== "undefined" && !A(h[d][e], a[d][e])) {
                                f = true;
                                break;
                            }
                        }
                        if (!f) {
                            c[d][e] = true;
                        }
                    }
                }
                var i = {
                    top: "",
                    left: "",
                    right: "",
                    bottom: ""
                };
                var j = function t(a, c) {
                    var d = typeof b.options.optimizations !== "undefined";
                    var e = d ? b.options.optimizations.gpu : null;
                    if (e !== false) {
                        var f = undefined, g = undefined;
                        if (a.top) {
                            i.top = 0;
                            f = c.top;
                        } else {
                            i.bottom = 0;
                            f = -c.bottom;
                        }
                        if (a.left) {
                            i.left = 0;
                            g = c.left;
                        } else {
                            i.right = 0;
                            g = -c.right;
                        }
                        i[B] = "translateX(" + Math.round(g) + "px) translateY(" + Math.round(f) + "px)";
                        if (B !== "msTransform") {
                            i[B] += " translateZ(0)";
                        }
                    } else {
                        if (a.top) {
                            i.top = c.top + "px";
                        } else {
                            i.bottom = c.bottom + "px";
                        }
                        if (a.left) {
                            i.left = c.left + "px";
                        } else {
                            i.right = c.right + "px";
                        }
                    }
                };
                var k = false;
                if ((c.page.top || c.page.bottom) && (c.page.left || c.page.right)) {
                    i.position = "absolute";
                    j(c.page, a.page);
                } else if ((c.viewport.top || c.viewport.bottom) && (c.viewport.left || c.viewport.right)) {
                    i.position = "fixed";
                    j(c.viewport, a.viewport);
                } else if (typeof c.offset !== "undefined" && c.offset.top && c.offset.left) {
                    (function() {
                        i.position = "absolute";
                        var d = b.cache("target-offsetparent", function() {
                            return l(b.target);
                        });
                        if (l(b.element) !== d) {
                            v(function() {
                                b.element.parentNode.removeChild(b.element);
                                d.appendChild(b.element);
                            });
                        }
                        j(c.offset, a.offset);
                        k = true;
                    })();
                } else {
                    i.position = "absolute";
                    j({
                        top: true,
                        left: true
                    }, a.page);
                }
                if (!k) {
                    var m = true;
                    var o = this.element.parentNode;
                    while (o && o.tagName !== "BODY") {
                        if (getComputedStyle(o).position !== "static") {
                            m = false;
                            break;
                        }
                        o = o.parentNode;
                    }
                    if (!m) {
                        this.element.parentNode.removeChild(this.element);
                        document.body.appendChild(this.element);
                    }
                }
                var p = {};
                var q = false;
                for (var e in i) {
                    var r = i[e];
                    var s = this.element.style[e];
                    if (s !== r) {
                        q = true;
                        p[e] = r;
                    }
                }
                if (q) {
                    v(function() {
                        n(b.element.style, p);
                    });
                }
            }
        } ]);
        return a;
    }();
    O.modules = [];
    f.position = D;
    var P = n(O, f);
    "use strict";
    var y = function() {
        function a(a, b) {
            var c = [];
            var d = true;
            var e = false;
            var f = undefined;
            try {
                for (var g = a[Symbol.iterator](), h; !(d = (h = g.next()).done); d = true) {
                    c.push(h.value);
                    if (b && c.length === b) break;
                }
            } catch (i) {
                e = true;
                f = i;
            } finally {
                try {
                    if (!d && g["return"]) g["return"]();
                } finally {
                    if (e) throw f;
                }
            }
            return c;
        }
        return function(b, c) {
            if (Array.isArray(b)) {
                return b;
            } else if (Symbol.iterator in Object(b)) {
                return a(b, c);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    var z = f.Utils;
    var k = z.getBounds;
    var n = z.extend;
    var t = z.updateClasses;
    var v = z.defer;
    var Q = [ "left", "top", "right", "bottom" ];
    function R(a, b) {
        if (b === "scrollParent") {
            b = a.scrollParents[0];
        } else if (b === "window") {
            b = [ pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset ];
        }
        if (b === document) {
            b = b.documentElement;
        }
        if (typeof b.nodeType !== "undefined") {
            (function() {
                var a = k(b);
                var c = a;
                var d = getComputedStyle(b);
                b = [ c.left, c.top, a.width + c.left, a.height + c.top ];
                Q.forEach(function(a, c) {
                    a = a[0].toUpperCase() + a.substr(1);
                    if (a === "Top" || a === "Left") {
                        b[c] += parseFloat(d["border" + a + "Width"]);
                    } else {
                        b[c] -= parseFloat(d["border" + a + "Width"]);
                    }
                });
            })();
        }
        return b;
    }
    f.modules.push({
        position: function Z(a) {
            var b = this;
            var c = a.top;
            var d = a.left;
            var e = a.targetAttachment;
            if (!this.options.constraints) {
                return true;
            }
            var f = this.cache("element-bounds", function() {
                return k(b.element);
            });
            var g = f.height;
            var h = f.width;
            if (h === 0 && g === 0 && typeof this.lastSize !== "undefined") {
                var i = this.lastSize;
                h = i.width;
                g = i.height;
            }
            var j = this.cache("target-bounds", function() {
                return b.getTargetBounds();
            });
            var l = j.height;
            var m = j.width;
            var o = [ this.getClass("pinned"), this.getClass("out-of-bounds") ];
            this.options.constraints.forEach(function(a) {
                var b = a.outOfBoundsClass;
                var c = a.pinnedClass;
                if (b) {
                    o.push(b);
                }
                if (c) {
                    o.push(c);
                }
            });
            o.forEach(function(a) {
                [ "left", "top", "right", "bottom" ].forEach(function(b) {
                    o.push(a + "-" + b);
                });
            });
            var p = [];
            var q = n({}, e);
            var r = n({}, this.attachment);
            this.options.constraints.forEach(function(a) {
                var f = a.to;
                var i = a.attachment;
                var j = a.pin;
                if (typeof i === "undefined") {
                    i = "";
                }
                var k = undefined, n = undefined;
                if (i.indexOf(" ") >= 0) {
                    var o = i.split(" ");
                    var s = y(o, 2);
                    n = s[0];
                    k = s[1];
                } else {
                    k = n = i;
                }
                var t = R(b, f);
                if (n === "target" || n === "both") {
                    if (c < t[1] && q.top === "top") {
                        c += l;
                        q.top = "bottom";
                    }
                    if (c + g > t[3] && q.top === "bottom") {
                        c -= l;
                        q.top = "top";
                    }
                }
                if (n === "together") {
                    if (q.top === "top") {
                        if (r.top === "bottom" && c < t[1]) {
                            c += l;
                            q.top = "bottom";
                            c += g;
                            r.top = "top";
                        } else if (r.top === "top" && c + g > t[3] && c - (g - l) >= t[1]) {
                            c -= g - l;
                            q.top = "bottom";
                            r.top = "bottom";
                        }
                    }
                    if (q.top === "bottom") {
                        if (r.top === "top" && c + g > t[3]) {
                            c -= l;
                            q.top = "top";
                            c -= g;
                            r.top = "bottom";
                        } else if (r.top === "bottom" && c < t[1] && c + (g * 2 - l) <= t[3]) {
                            c += g - l;
                            q.top = "top";
                            r.top = "top";
                        }
                    }
                    if (q.top === "middle") {
                        if (c + g > t[3] && r.top === "top") {
                            c -= g;
                            r.top = "bottom";
                        } else if (c < t[1] && r.top === "bottom") {
                            c += g;
                            r.top = "top";
                        }
                    }
                }
                if (k === "target" || k === "both") {
                    if (d < t[0] && q.left === "left") {
                        d += m;
                        q.left = "right";
                    }
                    if (d + h > t[2] && q.left === "right") {
                        d -= m;
                        q.left = "left";
                    }
                }
                if (k === "together") {
                    if (d < t[0] && q.left === "left") {
                        if (r.left === "right") {
                            d += m;
                            q.left = "right";
                            d += h;
                            r.left = "left";
                        } else if (r.left === "left") {
                            d += m;
                            q.left = "right";
                            d -= h;
                            r.left = "right";
                        }
                    } else if (d + h > t[2] && q.left === "right") {
                        if (r.left === "left") {
                            d -= m;
                            q.left = "left";
                            d -= h;
                            r.left = "right";
                        } else if (r.left === "right") {
                            d -= m;
                            q.left = "left";
                            d += h;
                            r.left = "left";
                        }
                    } else if (q.left === "center") {
                        if (d + h > t[2] && r.left === "left") {
                            d -= h;
                            r.left = "right";
                        } else if (d < t[0] && r.left === "right") {
                            d += h;
                            r.left = "left";
                        }
                    }
                }
                if (n === "element" || n === "both") {
                    if (c < t[1] && r.top === "bottom") {
                        c += g;
                        r.top = "top";
                    }
                    if (c + g > t[3] && r.top === "top") {
                        c -= g;
                        r.top = "bottom";
                    }
                }
                if (k === "element" || k === "both") {
                    if (d < t[0]) {
                        if (r.left === "right") {
                            d += h;
                            r.left = "left";
                        } else if (r.left === "center") {
                            d += h / 2;
                            r.left = "left";
                        }
                    }
                    if (d + h > t[2]) {
                        if (r.left === "left") {
                            d -= h;
                            r.left = "right";
                        } else if (r.left === "center") {
                            d -= h / 2;
                            r.left = "right";
                        }
                    }
                }
                if (typeof j === "string") {
                    j = j.split(",").map(function(a) {
                        return a.trim();
                    });
                } else if (j === true) {
                    j = [ "top", "left", "right", "bottom" ];
                }
                j = j || [];
                var u = [];
                var v = [];
                if (c < t[1]) {
                    if (j.indexOf("top") >= 0) {
                        c = t[1];
                        u.push("top");
                    } else {
                        v.push("top");
                    }
                }
                if (c + g > t[3]) {
                    if (j.indexOf("bottom") >= 0) {
                        c = t[3] - g;
                        u.push("bottom");
                    } else {
                        v.push("bottom");
                    }
                }
                if (d < t[0]) {
                    if (j.indexOf("left") >= 0) {
                        d = t[0];
                        u.push("left");
                    } else {
                        v.push("left");
                    }
                }
                if (d + h > t[2]) {
                    if (j.indexOf("right") >= 0) {
                        d = t[2] - h;
                        u.push("right");
                    } else {
                        v.push("right");
                    }
                }
                if (u.length) {
                    (function() {
                        var a = undefined;
                        if (typeof b.options.pinnedClass !== "undefined") {
                            a = b.options.pinnedClass;
                        } else {
                            a = b.getClass("pinned");
                        }
                        p.push(a);
                        u.forEach(function(b) {
                            p.push(a + "-" + b);
                        });
                    })();
                }
                if (v.length) {
                    (function() {
                        var a = undefined;
                        if (typeof b.options.outOfBoundsClass !== "undefined") {
                            a = b.options.outOfBoundsClass;
                        } else {
                            a = b.getClass("out-of-bounds");
                        }
                        p.push(a);
                        v.forEach(function(b) {
                            p.push(a + "-" + b);
                        });
                    })();
                }
                if (u.indexOf("left") >= 0 || u.indexOf("right") >= 0) {
                    r.left = q.left = false;
                }
                if (u.indexOf("top") >= 0 || u.indexOf("bottom") >= 0) {
                    r.top = q.top = false;
                }
                if (q.top !== e.top || q.left !== e.left || r.top !== b.attachment.top || r.left !== b.attachment.left) {
                    b.updateAttachClasses(r, q);
                }
            });
            v(function() {
                if (!(b.options.addTargetClasses === false)) {
                    t(b.target, p, o);
                }
                t(b.element, p, o);
            });
            return {
                top: c,
                left: d
            };
        }
    });
    "use strict";
    var z = f.Utils;
    var k = z.getBounds;
    var t = z.updateClasses;
    var v = z.defer;
    f.modules.push({
        position: function $(a) {
            var b = this;
            var c = a.top;
            var d = a.left;
            var e = this.cache("element-bounds", function() {
                return k(b.element);
            });
            var f = e.height;
            var g = e.width;
            var h = this.getTargetBounds();
            var i = c + f;
            var j = d + g;
            var l = [];
            if (c <= h.bottom && i >= h.top) {
                [ "left", "right" ].forEach(function(a) {
                    var b = h[a];
                    if (b === d || b === j) {
                        l.push(a);
                    }
                });
            }
            if (d <= h.right && j >= h.left) {
                [ "top", "bottom" ].forEach(function(a) {
                    var b = h[a];
                    if (b === c || b === i) {
                        l.push(a);
                    }
                });
            }
            var m = [];
            var n = [];
            var o = [ "left", "top", "right", "bottom" ];
            m.push(this.getClass("abutted"));
            o.forEach(function(a) {
                m.push(b.getClass("abutted") + "-" + a);
            });
            if (l.length) {
                n.push(this.getClass("abutted"));
            }
            l.forEach(function(a) {
                n.push(b.getClass("abutted") + "-" + a);
            });
            v(function() {
                if (!(b.options.addTargetClasses === false)) {
                    t(b.target, n, m);
                }
                t(b.element, n, m);
            });
            return true;
        }
    });
    "use strict";
    var y = function() {
        function a(a, b) {
            var c = [];
            var d = true;
            var e = false;
            var f = undefined;
            try {
                for (var g = a[Symbol.iterator](), h; !(d = (h = g.next()).done); d = true) {
                    c.push(h.value);
                    if (b && c.length === b) break;
                }
            } catch (i) {
                e = true;
                f = i;
            } finally {
                try {
                    if (!d && g["return"]) g["return"]();
                } finally {
                    if (e) throw f;
                }
            }
            return c;
        }
        return function(b, c) {
            if (Array.isArray(b)) {
                return b;
            } else if (Symbol.iterator in Object(b)) {
                return a(b, c);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    f.modules.push({
        position: function _(a) {
            var b = a.top;
            var c = a.left;
            if (!this.options.shift) {
                return;
            }
            var d = this.options.shift;
            if (typeof this.options.shift === "function") {
                d = this.options.shift.call(this, {
                    top: b,
                    left: c
                });
            }
            var e = undefined, f = undefined;
            if (typeof d === "string") {
                d = d.split(" ");
                d[1] = d[1] || d[0];
                var g = d;
                var h = y(g, 2);
                e = h[0];
                f = h[1];
                e = parseFloat(e, 10);
                f = parseFloat(f, 10);
            } else {
                e = d.top;
                f = d.left;
            }
            b += e;
            c += f;
            return {
                top: b,
                left: c
            };
        }
    });
    return P;
});

if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap's JavaScript requires jQuery");
}

+function(a) {
    var b = a.fn.jquery.split(" ")[0].split(".");
    if (b[0] < 2 && b[1] < 9 || b[0] == 1 && b[1] == 9 && b[2] < 1 || b[0] >= 3) {
        throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v3.0.0");
    }
}(jQuery);

+function(a) {
    "use strict";
    var b = function q(a, b, c) {
        var d = true;
        a: while (d) {
            var e = a, f = b, g = c;
            d = false;
            if (e === null) e = Function.prototype;
            var h = Object.getOwnPropertyDescriptor(e, f);
            if (h === undefined) {
                var i = Object.getPrototypeOf(e);
                if (i === null) {
                    return undefined;
                } else {
                    a = i;
                    b = f;
                    c = g;
                    d = true;
                    h = i = undefined;
                    continue a;
                }
            } else if ("value" in h) {
                return h.value;
            } else {
                var j = h.get;
                if (j === undefined) {
                    return undefined;
                }
                return j.call(g);
            }
        }
    };
    var c = function() {
        function a(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                d.enumerable = d.enumerable || false;
                d.configurable = true;
                if ("value" in d) d.writable = true;
                Object.defineProperty(a, d.key, d);
            }
        }
        return function(b, c, d) {
            if (c) a(b.prototype, c);
            if (d) a(b, d);
            return b;
        };
    }();
    function d(a, b) {
        if (typeof b !== "function" && b !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof b);
        }
        a.prototype = Object.create(b && b.prototype, {
            constructor: {
                value: a,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (b) Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b;
    }
    function e(a, b) {
        if (!(a instanceof b)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    var f = function(a) {
        var b = false;
        var c = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        function d(a) {
            return {}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }
        function e(a) {
            return (a[0] || a).nodeType;
        }
        function f() {
            return {
                bindType: b.end,
                delegateType: b.end,
                handle: function c(b) {
                    if (a(b.target).is(this)) {
                        return b.handleObj.handler.apply(this, arguments);
                    }
                }
            };
        }
        function g() {
            if (window.QUnit) {
                return false;
            }
            var a = document.createElement("bootstrap");
            for (var b in c) {
                if (a.style[b] !== undefined) {
                    return {
                        end: c[b]
                    };
                }
            }
            return false;
        }
        function h(b) {
            var c = this;
            var d = false;
            a(this).one(j.TRANSITION_END, function() {
                d = true;
            });
            setTimeout(function() {
                if (!d) {
                    j.triggerTransitionEnd(c);
                }
            }, b);
            return this;
        }
        function i() {
            b = g();
            a.fn.emulateTransitionEnd = h;
            if (j.supportsTransitionEnd()) {
                a.event.special[j.TRANSITION_END] = f();
            }
        }
        var j = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function k(a) {
                do {
                    a += ~~(Math.random() * 1e6);
                } while (document.getElementById(a));
                return a;
            },
            getSelectorFromElement: function l(a) {
                var b = a.getAttribute("data-target");
                if (!b) {
                    b = a.getAttribute("href") || "";
                    b = /^#[a-z]/i.test(b) ? b : null;
                }
                return b;
            },
            reflow: function m(a) {
                new Function("bs", "return bs")(a.offsetHeight);
            },
            triggerTransitionEnd: function n(c) {
                a(c).trigger(b.end);
            },
            supportsTransitionEnd: function o() {
                return Boolean(b);
            },
            typeCheckConfig: function p(a, b, c) {
                for (var f in c) {
                    if (c.hasOwnProperty(f)) {
                        var g = c[f];
                        var h = b[f];
                        var i = undefined;
                        if (h && e(h)) {
                            i = "element";
                        } else {
                            i = d(h);
                        }
                        if (!new RegExp(g).test(i)) {
                            throw new Error(a.toUpperCase() + ": " + ('Option "' + f + '" provided type "' + i + '" ') + ('but expected type "' + g + '".'));
                        }
                    }
                }
            }
        };
        i();
        return j;
    }(jQuery);
    var g = function(a) {
        var b = "alert";
        var d = "4.0.0-alpha";
        var g = "bs.alert";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = 150;
        var l = {
            DISMISS: '[data-dismiss="alert"]'
        };
        var m = {
            CLOSE: "close" + h,
            CLOSED: "closed" + h,
            CLICK_DATA_API: "click" + h + i
        };
        var n = {
            ALERT: "alert",
            FADE: "fade",
            IN: "in"
        };
        var o = function() {
            function b(a) {
                e(this, b);
                this._element = a;
            }
            c(b, [ {
                key: "close",
                value: function h(a) {
                    a = a || this._element;
                    var b = this._getRootElement(a);
                    var c = this._triggerCloseEvent(b);
                    if (c.isDefaultPrevented()) {
                        return;
                    }
                    this._removeElement(b);
                }
            }, {
                key: "dispose",
                value: function i() {
                    a.removeData(this._element, g);
                    this._element = null;
                }
            }, {
                key: "_getRootElement",
                value: function j(b) {
                    var c = f.getSelectorFromElement(b);
                    var d = false;
                    if (c) {
                        d = a(c)[0];
                    }
                    if (!d) {
                        d = a(b).closest("." + n.ALERT)[0];
                    }
                    return d;
                }
            }, {
                key: "_triggerCloseEvent",
                value: function l(b) {
                    var c = a.Event(m.CLOSE);
                    a(b).trigger(c);
                    return c;
                }
            }, {
                key: "_removeElement",
                value: function o(b) {
                    a(b).removeClass(n.IN);
                    if (!f.supportsTransitionEnd() || !a(b).hasClass(n.FADE)) {
                        this._destroyElement(b);
                        return;
                    }
                    a(b).one(f.TRANSITION_END, a.proxy(this._destroyElement, this, b)).emulateTransitionEnd(k);
                }
            }, {
                key: "_destroyElement",
                value: function p(b) {
                    a(b).detach().trigger(m.CLOSED).remove();
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function q(c) {
                    return this.each(function() {
                        var d = a(this);
                        var e = d.data(g);
                        if (!e) {
                            e = new b(this);
                            d.data(g, e);
                        }
                        if (c === "close") {
                            e[c](this);
                        }
                    });
                }
            }, {
                key: "_handleDismiss",
                value: function r(a) {
                    return function(b) {
                        if (b) {
                            b.preventDefault();
                        }
                        a.close(this);
                    };
                }
            }, {
                key: "VERSION",
                get: function s() {
                    return d;
                }
            } ]);
            return b;
        }();
        a(document).on(m.CLICK_DATA_API, l.DISMISS, o._handleDismiss(new o()));
        a.fn[b] = o._jQueryInterface;
        a.fn[b].Constructor = o;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return o._jQueryInterface;
        };
        return o;
    }(jQuery);
    var h = function(a) {
        var b = "button";
        var d = "4.0.0-alpha";
        var f = "bs.button";
        var g = "." + f;
        var h = ".data-api";
        var i = a.fn[b];
        var j = {
            ACTIVE: "active",
            BUTTON: "btn",
            FOCUS: "focus"
        };
        var k = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: "input",
            ACTIVE: ".active",
            BUTTON: ".btn"
        };
        var l = {
            CLICK_DATA_API: "click" + g + h,
            FOCUS_BLUR_DATA_API: "focus" + g + h + " " + ("blur" + g + h)
        };
        var m = function() {
            function b(a) {
                e(this, b);
                this._element = a;
            }
            c(b, [ {
                key: "toggle",
                value: function g() {
                    var b = true;
                    var c = a(this._element).closest(k.DATA_TOGGLE)[0];
                    if (c) {
                        var d = a(this._element).find(k.INPUT)[0];
                        if (d) {
                            if (d.type === "radio") {
                                if (d.checked && a(this._element).hasClass(j.ACTIVE)) {
                                    b = false;
                                } else {
                                    var e = a(c).find(k.ACTIVE)[0];
                                    if (e) {
                                        a(e).removeClass(j.ACTIVE);
                                    }
                                }
                            }
                            if (b) {
                                d.checked = !a(this._element).hasClass(j.ACTIVE);
                                a(this._element).trigger("change");
                            }
                        }
                    } else {
                        this._element.setAttribute("aria-pressed", !a(this._element).hasClass(j.ACTIVE));
                    }
                    if (b) {
                        a(this._element).toggleClass(j.ACTIVE);
                    }
                }
            }, {
                key: "dispose",
                value: function h() {
                    a.removeData(this._element, f);
                    this._element = null;
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function i(c) {
                    return this.each(function() {
                        var d = a(this).data(f);
                        if (!d) {
                            d = new b(this);
                            a(this).data(f, d);
                        }
                        if (c === "toggle") {
                            d[c]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function l() {
                    return d;
                }
            } ]);
            return b;
        }();
        a(document).on(l.CLICK_DATA_API, k.DATA_TOGGLE_CARROT, function(b) {
            b.preventDefault();
            var c = b.target;
            if (!a(c).hasClass(j.BUTTON)) {
                c = a(c).closest(k.BUTTON);
            }
            m._jQueryInterface.call(a(c), "toggle");
        }).on(l.FOCUS_BLUR_DATA_API, k.DATA_TOGGLE_CARROT, function(b) {
            var c = a(b.target).closest(k.BUTTON)[0];
            a(c).toggleClass(j.FOCUS, /^focus(in)?$/.test(b.type));
        });
        a.fn[b] = m._jQueryInterface;
        a.fn[b].Constructor = m;
        a.fn[b].noConflict = function() {
            a.fn[b] = i;
            return m._jQueryInterface;
        };
        return m;
    }(jQuery);
    var i = function(a) {
        var b = "carousel";
        var d = "4.0.0-alpha";
        var g = "bs.carousel";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = 600;
        var l = {
            interval: 5e3,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true
        };
        var m = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean"
        };
        var n = {
            NEXT: "next",
            PREVIOUS: "prev"
        };
        var o = {
            SLIDE: "slide" + h,
            SLID: "slid" + h,
            KEYDOWN: "keydown" + h,
            MOUSEENTER: "mouseenter" + h,
            MOUSELEAVE: "mouseleave" + h,
            LOAD_DATA_API: "load" + h + i,
            CLICK_DATA_API: "click" + h + i
        };
        var p = {
            CAROUSEL: "carousel",
            ACTIVE: "active",
            SLIDE: "slide",
            RIGHT: "right",
            LEFT: "left",
            ITEM: "carousel-item"
        };
        var q = {
            ACTIVE: ".active",
            ACTIVE_ITEM: ".active.carousel-item",
            ITEM: ".carousel-item",
            NEXT_PREV: ".next, .prev",
            INDICATORS: ".carousel-indicators",
            DATA_SLIDE: "[data-slide], [data-slide-to]",
            DATA_RIDE: '[data-ride="carousel"]'
        };
        var r = function() {
            function i(b, c) {
                e(this, i);
                this._items = null;
                this._interval = null;
                this._activeElement = null;
                this._isPaused = false;
                this._isSliding = false;
                this._config = this._getConfig(c);
                this._element = a(b)[0];
                this._indicatorsElement = a(this._element).find(q.INDICATORS)[0];
                this._addEventListeners();
            }
            c(i, [ {
                key: "next",
                value: function j() {
                    if (!this._isSliding) {
                        this._slide(n.NEXT);
                    }
                }
            }, {
                key: "nextWhenVisible",
                value: function r() {
                    if (!document.hidden) {
                        this.next();
                    }
                }
            }, {
                key: "prev",
                value: function s() {
                    if (!this._isSliding) {
                        this._slide(n.PREVIOUS);
                    }
                }
            }, {
                key: "pause",
                value: function t(b) {
                    if (!b) {
                        this._isPaused = true;
                    }
                    if (a(this._element).find(q.NEXT_PREV)[0] && f.supportsTransitionEnd()) {
                        f.triggerTransitionEnd(this._element);
                        this.cycle(true);
                    }
                    clearInterval(this._interval);
                    this._interval = null;
                }
            }, {
                key: "cycle",
                value: function u(b) {
                    if (!b) {
                        this._isPaused = false;
                    }
                    if (this._interval) {
                        clearInterval(this._interval);
                        this._interval = null;
                    }
                    if (this._config.interval && !this._isPaused) {
                        this._interval = setInterval(a.proxy(document.visibilityState ? this.nextWhenVisible : this.next, this), this._config.interval);
                    }
                }
            }, {
                key: "to",
                value: function v(b) {
                    var c = this;
                    this._activeElement = a(this._element).find(q.ACTIVE_ITEM)[0];
                    var d = this._getItemIndex(this._activeElement);
                    if (b > this._items.length - 1 || b < 0) {
                        return;
                    }
                    if (this._isSliding) {
                        a(this._element).one(o.SLID, function() {
                            return c.to(b);
                        });
                        return;
                    }
                    if (d === b) {
                        this.pause();
                        this.cycle();
                        return;
                    }
                    var e = b > d ? n.NEXT : n.PREVIOUS;
                    this._slide(e, this._items[b]);
                }
            }, {
                key: "dispose",
                value: function w() {
                    a(this._element).off(h);
                    a.removeData(this._element, g);
                    this._items = null;
                    this._config = null;
                    this._element = null;
                    this._interval = null;
                    this._isPaused = null;
                    this._isSliding = null;
                    this._activeElement = null;
                    this._indicatorsElement = null;
                }
            }, {
                key: "_getConfig",
                value: function x(c) {
                    c = a.extend({}, l, c);
                    f.typeCheckConfig(b, c, m);
                    return c;
                }
            }, {
                key: "_addEventListeners",
                value: function y() {
                    if (this._config.keyboard) {
                        a(this._element).on(o.KEYDOWN, a.proxy(this._keydown, this));
                    }
                    if (this._config.pause === "hover" && !("ontouchstart" in document.documentElement)) {
                        a(this._element).on(o.MOUSEENTER, a.proxy(this.pause, this)).on(o.MOUSELEAVE, a.proxy(this.cycle, this));
                    }
                }
            }, {
                key: "_keydown",
                value: function z(a) {
                    a.preventDefault();
                    if (/input|textarea/i.test(a.target.tagName)) {
                        return;
                    }
                    switch (a.which) {
                      case 37:
                        this.prev();
                        break;

                      case 39:
                        this.next();
                        break;

                      default:
                        return;
                    }
                }
            }, {
                key: "_getItemIndex",
                value: function A(b) {
                    this._items = a.makeArray(a(b).parent().find(q.ITEM));
                    return this._items.indexOf(b);
                }
            }, {
                key: "_getItemByDirection",
                value: function B(a, b) {
                    var c = a === n.NEXT;
                    var d = a === n.PREVIOUS;
                    var e = this._getItemIndex(b);
                    var f = this._items.length - 1;
                    var g = d && e === 0 || c && e === f;
                    if (g && !this._config.wrap) {
                        return b;
                    }
                    var h = a === n.PREVIOUS ? -1 : 1;
                    var i = (e + h) % this._items.length;
                    return i === -1 ? this._items[this._items.length - 1] : this._items[i];
                }
            }, {
                key: "_triggerSlideEvent",
                value: function C(b, c) {
                    var d = a.Event(o.SLIDE, {
                        relatedTarget: b,
                        direction: c
                    });
                    a(this._element).trigger(d);
                    return d;
                }
            }, {
                key: "_setActiveIndicatorElement",
                value: function D(b) {
                    if (this._indicatorsElement) {
                        a(this._indicatorsElement).find(q.ACTIVE).removeClass(p.ACTIVE);
                        var c = this._indicatorsElement.children[this._getItemIndex(b)];
                        if (c) {
                            a(c).addClass(p.ACTIVE);
                        }
                    }
                }
            }, {
                key: "_slide",
                value: function E(b, c) {
                    var d = this;
                    var e = a(this._element).find(q.ACTIVE_ITEM)[0];
                    var g = c || e && this._getItemByDirection(b, e);
                    var h = Boolean(this._interval);
                    var i = b === n.NEXT ? p.LEFT : p.RIGHT;
                    if (g && a(g).hasClass(p.ACTIVE)) {
                        this._isSliding = false;
                        return;
                    }
                    var j = this._triggerSlideEvent(g, i);
                    if (j.isDefaultPrevented()) {
                        return;
                    }
                    if (!e || !g) {
                        return;
                    }
                    this._isSliding = true;
                    if (h) {
                        this.pause();
                    }
                    this._setActiveIndicatorElement(g);
                    var l = a.Event(o.SLID, {
                        relatedTarget: g,
                        direction: i
                    });
                    if (f.supportsTransitionEnd() && a(this._element).hasClass(p.SLIDE)) {
                        a(g).addClass(b);
                        f.reflow(g);
                        a(e).addClass(i);
                        a(g).addClass(i);
                        a(e).one(f.TRANSITION_END, function() {
                            a(g).removeClass(i).removeClass(b);
                            a(g).addClass(p.ACTIVE);
                            a(e).removeClass(p.ACTIVE).removeClass(b).removeClass(i);
                            d._isSliding = false;
                            setTimeout(function() {
                                return a(d._element).trigger(l);
                            }, 0);
                        }).emulateTransitionEnd(k);
                    } else {
                        a(e).removeClass(p.ACTIVE);
                        a(g).addClass(p.ACTIVE);
                        this._isSliding = false;
                        a(this._element).trigger(l);
                    }
                    if (h) {
                        this.cycle();
                    }
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function F(b) {
                    return this.each(function() {
                        var c = a(this).data(g);
                        var d = a.extend({}, l, a(this).data());
                        if (typeof b === "object") {
                            a.extend(d, b);
                        }
                        var e = typeof b === "string" ? b : d.slide;
                        if (!c) {
                            c = new i(this, d);
                            a(this).data(g, c);
                        }
                        if (typeof b === "number") {
                            c.to(b);
                        } else if (typeof e === "string") {
                            if (c[e] === undefined) {
                                throw new Error('No method named "' + e + '"');
                            }
                            c[e]();
                        } else if (d.interval) {
                            c.pause();
                            c.cycle();
                        }
                    });
                }
            }, {
                key: "_dataApiClickHandler",
                value: function G(b) {
                    var c = f.getSelectorFromElement(this);
                    if (!c) {
                        return;
                    }
                    var d = a(c)[0];
                    if (!d || !a(d).hasClass(p.CAROUSEL)) {
                        return;
                    }
                    var e = a.extend({}, a(d).data(), a(this).data());
                    var h = this.getAttribute("data-slide-to");
                    if (h) {
                        e.interval = false;
                    }
                    i._jQueryInterface.call(a(d), e);
                    if (h) {
                        a(d).data(g).to(h);
                    }
                    b.preventDefault();
                }
            }, {
                key: "VERSION",
                get: function H() {
                    return d;
                }
            }, {
                key: "Default",
                get: function I() {
                    return l;
                }
            } ]);
            return i;
        }();
        a(document).on(o.CLICK_DATA_API, q.DATA_SLIDE, r._dataApiClickHandler);
        a(window).on(o.LOAD_DATA_API, function() {
            a(q.DATA_RIDE).each(function() {
                var b = a(this);
                r._jQueryInterface.call(b, b.data());
            });
        });
        a.fn[b] = r._jQueryInterface;
        a.fn[b].Constructor = r;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return r._jQueryInterface;
        };
        return r;
    }(jQuery);
    var j = function(a) {
        var b = "collapse";
        var d = "4.0.0-alpha";
        var g = "bs.collapse";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = 600;
        var l = {
            toggle: true,
            parent: ""
        };
        var m = {
            toggle: "boolean",
            parent: "string"
        };
        var n = {
            SHOW: "show" + h,
            SHOWN: "shown" + h,
            HIDE: "hide" + h,
            HIDDEN: "hidden" + h,
            CLICK_DATA_API: "click" + h + i
        };
        var o = {
            IN: "in",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed"
        };
        var p = {
            WIDTH: "width",
            HEIGHT: "height"
        };
        var q = {
            ACTIVES: ".panel > .in, .panel > .collapsing",
            DATA_TOGGLE: '[data-toggle="collapse"]'
        };
        var r = function() {
            function h(b, c) {
                e(this, h);
                this._isTransitioning = false;
                this._element = b;
                this._config = this._getConfig(c);
                this._triggerArray = a.makeArray(a('[data-toggle="collapse"][href="#' + b.id + '"],' + ('[data-toggle="collapse"][data-target="#' + b.id + '"]')));
                this._parent = this._config.parent ? this._getParent() : null;
                if (!this._config.parent) {
                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                }
                if (this._config.toggle) {
                    this.toggle();
                }
            }
            c(h, [ {
                key: "toggle",
                value: function i() {
                    if (a(this._element).hasClass(o.IN)) {
                        this.hide();
                    } else {
                        this.show();
                    }
                }
            }, {
                key: "show",
                value: function j() {
                    var b = this;
                    if (this._isTransitioning || a(this._element).hasClass(o.IN)) {
                        return;
                    }
                    var c = undefined;
                    var d = undefined;
                    if (this._parent) {
                        c = a.makeArray(a(q.ACTIVES));
                        if (!c.length) {
                            c = null;
                        }
                    }
                    if (c) {
                        d = a(c).data(g);
                        if (d && d._isTransitioning) {
                            return;
                        }
                    }
                    var e = a.Event(n.SHOW);
                    a(this._element).trigger(e);
                    if (e.isDefaultPrevented()) {
                        return;
                    }
                    if (c) {
                        h._jQueryInterface.call(a(c), "hide");
                        if (!d) {
                            a(c).data(g, null);
                        }
                    }
                    var i = this._getDimension();
                    a(this._element).removeClass(o.COLLAPSE).addClass(o.COLLAPSING);
                    this._element.style[i] = 0;
                    this._element.setAttribute("aria-expanded", true);
                    if (this._triggerArray.length) {
                        a(this._triggerArray).removeClass(o.COLLAPSED).attr("aria-expanded", true);
                    }
                    this.setTransitioning(true);
                    var j = function p() {
                        a(b._element).removeClass(o.COLLAPSING).addClass(o.COLLAPSE).addClass(o.IN);
                        b._element.style[i] = "";
                        b.setTransitioning(false);
                        a(b._element).trigger(n.SHOWN);
                    };
                    if (!f.supportsTransitionEnd()) {
                        j();
                        return;
                    }
                    var l = i[0].toUpperCase() + i.slice(1);
                    var m = "scroll" + l;
                    a(this._element).one(f.TRANSITION_END, j).emulateTransitionEnd(k);
                    this._element.style[i] = this._element[m] + "px";
                }
            }, {
                key: "hide",
                value: function r() {
                    var b = this;
                    if (this._isTransitioning || !a(this._element).hasClass(o.IN)) {
                        return;
                    }
                    var c = a.Event(n.HIDE);
                    a(this._element).trigger(c);
                    if (c.isDefaultPrevented()) {
                        return;
                    }
                    var d = this._getDimension();
                    var e = d === p.WIDTH ? "offsetWidth" : "offsetHeight";
                    this._element.style[d] = this._element[e] + "px";
                    f.reflow(this._element);
                    a(this._element).addClass(o.COLLAPSING).removeClass(o.COLLAPSE).removeClass(o.IN);
                    this._element.setAttribute("aria-expanded", false);
                    if (this._triggerArray.length) {
                        a(this._triggerArray).addClass(o.COLLAPSED).attr("aria-expanded", false);
                    }
                    this.setTransitioning(true);
                    var g = function h() {
                        b.setTransitioning(false);
                        a(b._element).removeClass(o.COLLAPSING).addClass(o.COLLAPSE).trigger(n.HIDDEN);
                    };
                    this._element.style[d] = 0;
                    if (!f.supportsTransitionEnd()) {
                        g();
                        return;
                    }
                    a(this._element).one(f.TRANSITION_END, g).emulateTransitionEnd(k);
                }
            }, {
                key: "setTransitioning",
                value: function s(a) {
                    this._isTransitioning = a;
                }
            }, {
                key: "dispose",
                value: function t() {
                    a.removeData(this._element, g);
                    this._config = null;
                    this._parent = null;
                    this._element = null;
                    this._triggerArray = null;
                    this._isTransitioning = null;
                }
            }, {
                key: "_getConfig",
                value: function u(c) {
                    c = a.extend({}, l, c);
                    c.toggle = Boolean(c.toggle);
                    f.typeCheckConfig(b, c, m);
                    return c;
                }
            }, {
                key: "_getDimension",
                value: function v() {
                    var b = a(this._element).hasClass(p.WIDTH);
                    return b ? p.WIDTH : p.HEIGHT;
                }
            }, {
                key: "_getParent",
                value: function w() {
                    var b = this;
                    var c = a(this._config.parent)[0];
                    var d = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                    a(c).find(d).each(function(a, c) {
                        b._addAriaAndCollapsedClass(h._getTargetFromElement(c), [ c ]);
                    });
                    return c;
                }
            }, {
                key: "_addAriaAndCollapsedClass",
                value: function x(b, c) {
                    if (b) {
                        var d = a(b).hasClass(o.IN);
                        b.setAttribute("aria-expanded", d);
                        if (c.length) {
                            a(c).toggleClass(o.COLLAPSED, !d).attr("aria-expanded", d);
                        }
                    }
                }
            } ], [ {
                key: "_getTargetFromElement",
                value: function y(b) {
                    var c = f.getSelectorFromElement(b);
                    return c ? a(c)[0] : null;
                }
            }, {
                key: "_jQueryInterface",
                value: function z(b) {
                    return this.each(function() {
                        var c = a(this);
                        var d = c.data(g);
                        var e = a.extend({}, l, c.data(), typeof b === "object" && b);
                        if (!d && e.toggle && /show|hide/.test(b)) {
                            e.toggle = false;
                        }
                        if (!d) {
                            d = new h(this, e);
                            c.data(g, d);
                        }
                        if (typeof b === "string") {
                            if (d[b] === undefined) {
                                throw new Error('No method named "' + b + '"');
                            }
                            d[b]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function A() {
                    return d;
                }
            }, {
                key: "Default",
                get: function B() {
                    return l;
                }
            } ]);
            return h;
        }();
        a(document).on(n.CLICK_DATA_API, q.DATA_TOGGLE, function(b) {
            b.preventDefault();
            var c = r._getTargetFromElement(this);
            var d = a(c).data(g);
            var e = d ? "toggle" : a(this).data();
            r._jQueryInterface.call(a(c), e);
        });
        a.fn[b] = r._jQueryInterface;
        a.fn[b].Constructor = r;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return r._jQueryInterface;
        };
        return r;
    }(jQuery);
    var k = function(a) {
        var b = "dropdown";
        var d = "4.0.0-alpha";
        var g = "bs.dropdown";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = {
            HIDE: "hide" + h,
            HIDDEN: "hidden" + h,
            SHOW: "show" + h,
            SHOWN: "shown" + h,
            CLICK: "click" + h,
            CLICK_DATA_API: "click" + h + i,
            KEYDOWN_DATA_API: "keydown" + h + i
        };
        var l = {
            BACKDROP: "dropdown-backdrop",
            DISABLED: "disabled",
            OPEN: "open"
        };
        var m = {
            BACKDROP: ".dropdown-backdrop",
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: ".dropdown form",
            ROLE_MENU: '[role="menu"]',
            ROLE_LISTBOX: '[role="listbox"]',
            NAVBAR_NAV: ".navbar-nav",
            VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, ' + '[role="listbox"] li:not(.disabled) a'
        };
        var n = function() {
            function b(a) {
                e(this, b);
                this._element = a;
                this._addEventListeners();
            }
            c(b, [ {
                key: "toggle",
                value: function i() {
                    if (this.disabled || a(this).hasClass(l.DISABLED)) {
                        return false;
                    }
                    var c = b._getParentFromElement(this);
                    var d = a(c).hasClass(l.OPEN);
                    b._clearMenus();
                    if (d) {
                        return false;
                    }
                    if ("ontouchstart" in document.documentElement && !a(c).closest(m.NAVBAR_NAV).length) {
                        var e = document.createElement("div");
                        e.className = l.BACKDROP;
                        a(e).insertBefore(this);
                        a(e).on("click", b._clearMenus);
                    }
                    var f = {
                        relatedTarget: this
                    };
                    var g = a.Event(k.SHOW, f);
                    a(c).trigger(g);
                    if (g.isDefaultPrevented()) {
                        return false;
                    }
                    this.focus();
                    this.setAttribute("aria-expanded", "true");
                    a(c).toggleClass(l.OPEN);
                    a(c).trigger(a.Event(k.SHOWN, f));
                    return false;
                }
            }, {
                key: "dispose",
                value: function j() {
                    a.removeData(this._element, g);
                    a(this._element).off(h);
                    this._element = null;
                }
            }, {
                key: "_addEventListeners",
                value: function n() {
                    a(this._element).on(k.CLICK, this.toggle);
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function o(c) {
                    return this.each(function() {
                        var d = a(this).data(g);
                        if (!d) {
                            a(this).data(g, d = new b(this));
                        }
                        if (typeof c === "string") {
                            if (d[c] === undefined) {
                                throw new Error('No method named "' + c + '"');
                            }
                            d[c].call(this);
                        }
                    });
                }
            }, {
                key: "_clearMenus",
                value: function p(c) {
                    if (c && c.which === 3) {
                        return;
                    }
                    var d = a(m.BACKDROP)[0];
                    if (d) {
                        d.parentNode.removeChild(d);
                    }
                    var e = a.makeArray(a(m.DATA_TOGGLE));
                    for (var f = 0; f < e.length; f++) {
                        var g = b._getParentFromElement(e[f]);
                        var h = {
                            relatedTarget: e[f]
                        };
                        if (!a(g).hasClass(l.OPEN)) {
                            continue;
                        }
                        if (c && c.type === "click" && /input|textarea/i.test(c.target.tagName) && a.contains(g, c.target)) {
                            continue;
                        }
                        var i = a.Event(k.HIDE, h);
                        a(g).trigger(i);
                        if (i.isDefaultPrevented()) {
                            continue;
                        }
                        e[f].setAttribute("aria-expanded", "false");
                        a(g).removeClass(l.OPEN).trigger(a.Event(k.HIDDEN, h));
                    }
                }
            }, {
                key: "_getParentFromElement",
                value: function q(b) {
                    var c = undefined;
                    var d = f.getSelectorFromElement(b);
                    if (d) {
                        c = a(d)[0];
                    }
                    return c || b.parentNode;
                }
            }, {
                key: "_dataApiKeydownHandler",
                value: function r(c) {
                    if (!/(38|40|27|32)/.test(c.which) || /input|textarea/i.test(c.target.tagName)) {
                        return;
                    }
                    c.preventDefault();
                    c.stopPropagation();
                    if (this.disabled || a(this).hasClass(l.DISABLED)) {
                        return;
                    }
                    var d = b._getParentFromElement(this);
                    var e = a(d).hasClass(l.OPEN);
                    if (!e && c.which !== 27 || e && c.which === 27) {
                        if (c.which === 27) {
                            var f = a(d).find(m.DATA_TOGGLE)[0];
                            a(f).trigger("focus");
                        }
                        a(this).trigger("click");
                        return;
                    }
                    var g = a.makeArray(a(m.VISIBLE_ITEMS));
                    g = g.filter(function(a) {
                        return a.offsetWidth || a.offsetHeight;
                    });
                    if (!g.length) {
                        return;
                    }
                    var h = g.indexOf(c.target);
                    if (c.which === 38 && h > 0) {
                        h--;
                    }
                    if (c.which === 40 && h < g.length - 1) {
                        h++;
                    }
                    if (!~h) {
                        h = 0;
                    }
                    g[h].focus();
                }
            }, {
                key: "VERSION",
                get: function s() {
                    return d;
                }
            } ]);
            return b;
        }();
        a(document).on(k.KEYDOWN_DATA_API, m.DATA_TOGGLE, n._dataApiKeydownHandler).on(k.KEYDOWN_DATA_API, m.ROLE_MENU, n._dataApiKeydownHandler).on(k.KEYDOWN_DATA_API, m.ROLE_LISTBOX, n._dataApiKeydownHandler).on(k.CLICK_DATA_API, n._clearMenus).on(k.CLICK_DATA_API, m.DATA_TOGGLE, n.prototype.toggle).on(k.CLICK_DATA_API, m.FORM_CHILD, function(a) {
            a.stopPropagation();
        });
        a.fn[b] = n._jQueryInterface;
        a.fn[b].Constructor = n;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return n._jQueryInterface;
        };
        return n;
    }(jQuery);
    var l = function(a) {
        var b = "modal";
        var d = "4.0.0-alpha";
        var g = "bs.modal";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = 300;
        var l = 150;
        var m = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var n = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        };
        var o = {
            HIDE: "hide" + h,
            HIDDEN: "hidden" + h,
            SHOW: "show" + h,
            SHOWN: "shown" + h,
            FOCUSIN: "focusin" + h,
            RESIZE: "resize" + h,
            CLICK_DISMISS: "click.dismiss" + h,
            KEYDOWN_DISMISS: "keydown.dismiss" + h,
            MOUSEUP_DISMISS: "mouseup.dismiss" + h,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + h,
            CLICK_DATA_API: "click" + h + i
        };
        var p = {
            SCROLLBAR_MEASURER: "modal-scrollbar-measure",
            BACKDROP: "modal-backdrop",
            OPEN: "modal-open",
            FADE: "fade",
            IN: "in"
        };
        var q = {
            DIALOG: ".modal-dialog",
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: ".navbar-fixed-top, .navbar-fixed-bottom, .is-fixed"
        };
        var r = function() {
            function i(b, c) {
                e(this, i);
                this._config = this._getConfig(c);
                this._element = b;
                this._dialog = a(b).find(q.DIALOG)[0];
                this._backdrop = null;
                this._isShown = false;
                this._isBodyOverflowing = false;
                this._ignoreBackdropClick = false;
                this._originalBodyPadding = 0;
                this._scrollbarWidth = 0;
            }
            c(i, [ {
                key: "toggle",
                value: function j(a) {
                    return this._isShown ? this.hide() : this.show(a);
                }
            }, {
                key: "show",
                value: function r(b) {
                    var c = this;
                    var d = a.Event(o.SHOW, {
                        relatedTarget: b
                    });
                    a(this._element).trigger(d);
                    if (this._isShown || d.isDefaultPrevented()) {
                        return;
                    }
                    this._isShown = true;
                    this._checkScrollbar();
                    this._setScrollbar();
                    a(document.body).addClass(p.OPEN);
                    this._setEscapeEvent();
                    this._setResizeEvent();
                    a(this._element).on(o.CLICK_DISMISS, q.DATA_DISMISS, a.proxy(this.hide, this));
                    a(this._dialog).on(o.MOUSEDOWN_DISMISS, function() {
                        a(c._element).one(o.MOUSEUP_DISMISS, function(b) {
                            if (a(b.target).is(c._element)) {
                                c._ignoreBackdropClick = true;
                            }
                        });
                    });
                    this._showBackdrop(a.proxy(this._showElement, this, b));
                }
            }, {
                key: "hide",
                value: function s(b) {
                    if (b) {
                        b.preventDefault();
                    }
                    var c = a.Event(o.HIDE);
                    a(this._element).trigger(c);
                    if (!this._isShown || c.isDefaultPrevented()) {
                        return;
                    }
                    this._isShown = false;
                    this._setEscapeEvent();
                    this._setResizeEvent();
                    a(document).off(o.FOCUSIN);
                    a(this._element).removeClass(p.IN);
                    a(this._element).off(o.CLICK_DISMISS);
                    a(this._dialog).off(o.MOUSEDOWN_DISMISS);
                    if (f.supportsTransitionEnd() && a(this._element).hasClass(p.FADE)) {
                        a(this._element).one(f.TRANSITION_END, a.proxy(this._hideModal, this)).emulateTransitionEnd(k);
                    } else {
                        this._hideModal();
                    }
                }
            }, {
                key: "dispose",
                value: function t() {
                    a.removeData(this._element, g);
                    a(window).off(h);
                    a(document).off(h);
                    a(this._element).off(h);
                    a(this._backdrop).off(h);
                    this._config = null;
                    this._element = null;
                    this._dialog = null;
                    this._backdrop = null;
                    this._isShown = null;
                    this._isBodyOverflowing = null;
                    this._ignoreBackdropClick = null;
                    this._originalBodyPadding = null;
                    this._scrollbarWidth = null;
                }
            }, {
                key: "_getConfig",
                value: function u(c) {
                    c = a.extend({}, m, c);
                    f.typeCheckConfig(b, c, n);
                    return c;
                }
            }, {
                key: "_showElement",
                value: function v(b) {
                    var c = this;
                    var d = f.supportsTransitionEnd() && a(this._element).hasClass(p.FADE);
                    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                        document.body.appendChild(this._element);
                    }
                    this._element.style.display = "block";
                    this._element.scrollTop = 0;
                    if (d) {
                        f.reflow(this._element);
                    }
                    a(this._element).addClass(p.IN);
                    if (this._config.focus) {
                        this._enforceFocus();
                    }
                    var e = a.Event(o.SHOWN, {
                        relatedTarget: b
                    });
                    var g = function h() {
                        if (c._config.focus) {
                            c._element.focus();
                        }
                        a(c._element).trigger(e);
                    };
                    if (d) {
                        a(this._dialog).one(f.TRANSITION_END, g).emulateTransitionEnd(k);
                    } else {
                        g();
                    }
                }
            }, {
                key: "_enforceFocus",
                value: function w() {
                    var b = this;
                    a(document).off(o.FOCUSIN).on(o.FOCUSIN, function(c) {
                        if (b._element !== c.target && !a(b._element).has(c.target).length) {
                            b._element.focus();
                        }
                    });
                }
            }, {
                key: "_setEscapeEvent",
                value: function x() {
                    var b = this;
                    if (this._isShown && this._config.keyboard) {
                        a(this._element).on(o.KEYDOWN_DISMISS, function(a) {
                            if (a.which === 27) {
                                b.hide();
                            }
                        });
                    } else if (!this._isShown) {
                        a(this._element).off(o.KEYDOWN_DISMISS);
                    }
                }
            }, {
                key: "_setResizeEvent",
                value: function y() {
                    if (this._isShown) {
                        a(window).on(o.RESIZE, a.proxy(this._handleUpdate, this));
                    } else {
                        a(window).off(o.RESIZE);
                    }
                }
            }, {
                key: "_hideModal",
                value: function z() {
                    var b = this;
                    this._element.style.display = "none";
                    this._showBackdrop(function() {
                        a(document.body).removeClass(p.OPEN);
                        b._resetAdjustments();
                        b._resetScrollbar();
                        a(b._element).trigger(o.HIDDEN);
                    });
                }
            }, {
                key: "_removeBackdrop",
                value: function A() {
                    if (this._backdrop) {
                        a(this._backdrop).remove();
                        this._backdrop = null;
                    }
                }
            }, {
                key: "_showBackdrop",
                value: function B(b) {
                    var c = this;
                    var d = a(this._element).hasClass(p.FADE) ? p.FADE : "";
                    if (this._isShown && this._config.backdrop) {
                        var e = f.supportsTransitionEnd() && d;
                        this._backdrop = document.createElement("div");
                        this._backdrop.className = p.BACKDROP;
                        if (d) {
                            a(this._backdrop).addClass(d);
                        }
                        a(this._backdrop).appendTo(document.body);
                        a(this._element).on(o.CLICK_DISMISS, function(a) {
                            if (c._ignoreBackdropClick) {
                                c._ignoreBackdropClick = false;
                                return;
                            }
                            if (a.target !== a.currentTarget) {
                                return;
                            }
                            if (c._config.backdrop === "static") {
                                c._element.focus();
                            } else {
                                c.hide();
                            }
                        });
                        if (e) {
                            f.reflow(this._backdrop);
                        }
                        a(this._backdrop).addClass(p.IN);
                        if (!b) {
                            return;
                        }
                        if (!e) {
                            b();
                            return;
                        }
                        a(this._backdrop).one(f.TRANSITION_END, b).emulateTransitionEnd(l);
                    } else if (!this._isShown && this._backdrop) {
                        a(this._backdrop).removeClass(p.IN);
                        var g = function h() {
                            c._removeBackdrop();
                            if (b) {
                                b();
                            }
                        };
                        if (f.supportsTransitionEnd() && a(this._element).hasClass(p.FADE)) {
                            a(this._backdrop).one(f.TRANSITION_END, g).emulateTransitionEnd(l);
                        } else {
                            g();
                        }
                    } else if (b) {
                        b();
                    }
                }
            }, {
                key: "_handleUpdate",
                value: function C() {
                    this._adjustDialog();
                }
            }, {
                key: "_adjustDialog",
                value: function D() {
                    var a = this._element.scrollHeight > document.documentElement.clientHeight;
                    if (!this._isBodyOverflowing && a) {
                        this._element.style.paddingLeft = this._scrollbarWidth + "px";
                    }
                    if (this._isBodyOverflowing && !a) {
                        this._element.style.paddingRight = this._scrollbarWidth + "px~";
                    }
                }
            }, {
                key: "_resetAdjustments",
                value: function E() {
                    this._element.style.paddingLeft = "";
                    this._element.style.paddingRight = "";
                }
            }, {
                key: "_checkScrollbar",
                value: function F() {
                    var a = window.innerWidth;
                    if (!a) {
                        var b = document.documentElement.getBoundingClientRect();
                        a = b.right - Math.abs(b.left);
                    }
                    this._isBodyOverflowing = document.body.clientWidth < a;
                    this._scrollbarWidth = this._getScrollbarWidth();
                }
            }, {
                key: "_setScrollbar",
                value: function G() {
                    var b = parseInt(a(q.FIXED_CONTENT).css("padding-right") || 0, 10);
                    this._originalBodyPadding = document.body.style.paddingRight || "";
                    if (this._isBodyOverflowing) {
                        document.body.style.paddingRight = b + this._scrollbarWidth + "px";
                    }
                }
            }, {
                key: "_resetScrollbar",
                value: function H() {
                    document.body.style.paddingRight = this._originalBodyPadding;
                }
            }, {
                key: "_getScrollbarWidth",
                value: function I() {
                    var a = document.createElement("div");
                    a.className = p.SCROLLBAR_MEASURER;
                    document.body.appendChild(a);
                    var b = a.offsetWidth - a.clientWidth;
                    document.body.removeChild(a);
                    return b;
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function J(b, c) {
                    return this.each(function() {
                        var d = a(this).data(g);
                        var e = a.extend({}, i.Default, a(this).data(), typeof b === "object" && b);
                        if (!d) {
                            d = new i(this, e);
                            a(this).data(g, d);
                        }
                        if (typeof b === "string") {
                            if (d[b] === undefined) {
                                throw new Error('No method named "' + b + '"');
                            }
                            d[b](c);
                        } else if (e.show) {
                            d.show(c);
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function K() {
                    return d;
                }
            }, {
                key: "Default",
                get: function L() {
                    return m;
                }
            } ]);
            return i;
        }();
        a(document).on(o.CLICK_DATA_API, q.DATA_TOGGLE, function(b) {
            var c = this;
            var d = undefined;
            var e = f.getSelectorFromElement(this);
            if (e) {
                d = a(e)[0];
            }
            var h = a(d).data(g) ? "toggle" : a.extend({}, a(d).data(), a(this).data());
            if (this.tagName === "A") {
                b.preventDefault();
            }
            var i = a(d).one(o.SHOW, function(b) {
                if (b.isDefaultPrevented()) {
                    return;
                }
                i.one(o.HIDDEN, function() {
                    if (a(c).is(":visible")) {
                        c.focus();
                    }
                });
            });
            r._jQueryInterface.call(a(d), h, this);
        });
        a.fn[b] = r._jQueryInterface;
        a.fn[b].Constructor = r;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return r._jQueryInterface;
        };
        return r;
    }(jQuery);
    var m = function(a) {
        var b = "scrollspy";
        var d = "4.0.0-alpha";
        var g = "bs.scrollspy";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = {
            offset: 10,
            method: "auto",
            target: ""
        };
        var l = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        };
        var m = {
            ACTIVATE: "activate" + h,
            SCROLL: "scroll" + h,
            LOAD_DATA_API: "load" + h + i
        };
        var n = {
            DROPDOWN_ITEM: "dropdown-item",
            DROPDOWN_MENU: "dropdown-menu",
            NAV_LINK: "nav-link",
            NAV: "nav",
            ACTIVE: "active"
        };
        var o = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: ".active",
            LIST_ITEM: ".list-item",
            LI: "li",
            LI_DROPDOWN: "li.dropdown",
            NAV_LINKS: ".nav-link",
            DROPDOWN: ".dropdown",
            DROPDOWN_ITEMS: ".dropdown-item",
            DROPDOWN_TOGGLE: ".dropdown-toggle"
        };
        var p = {
            OFFSET: "offset",
            POSITION: "position"
        };
        var q = function() {
            function i(b, c) {
                e(this, i);
                this._element = b;
                this._scrollElement = b.tagName === "BODY" ? window : b;
                this._config = this._getConfig(c);
                this._selector = this._config.target + " " + o.NAV_LINKS + "," + (this._config.target + " " + o.DROPDOWN_ITEMS);
                this._offsets = [];
                this._targets = [];
                this._activeTarget = null;
                this._scrollHeight = 0;
                a(this._scrollElement).on(m.SCROLL, a.proxy(this._process, this));
                this.refresh();
                this._process();
            }
            c(i, [ {
                key: "refresh",
                value: function j() {
                    var b = this;
                    var c = this._scrollElement !== this._scrollElement.window ? p.POSITION : p.OFFSET;
                    var d = this._config.method === "auto" ? c : this._config.method;
                    var e = d === p.POSITION ? this._getScrollTop() : 0;
                    this._offsets = [];
                    this._targets = [];
                    this._scrollHeight = this._getScrollHeight();
                    var g = a.makeArray(a(this._selector));
                    g.map(function(b) {
                        var c = undefined;
                        var g = f.getSelectorFromElement(b);
                        if (g) {
                            c = a(g)[0];
                        }
                        if (c && (c.offsetWidth || c.offsetHeight)) {
                            return [ a(c)[d]().top + e, g ];
                        }
                    }).filter(function(a) {
                        return a;
                    }).sort(function(a, b) {
                        return a[0] - b[0];
                    }).forEach(function(a) {
                        b._offsets.push(a[0]);
                        b._targets.push(a[1]);
                    });
                }
            }, {
                key: "dispose",
                value: function q() {
                    a.removeData(this._element, g);
                    a(this._scrollElement).off(h);
                    this._element = null;
                    this._scrollElement = null;
                    this._config = null;
                    this._selector = null;
                    this._offsets = null;
                    this._targets = null;
                    this._activeTarget = null;
                    this._scrollHeight = null;
                }
            }, {
                key: "_getConfig",
                value: function r(c) {
                    c = a.extend({}, k, c);
                    if (typeof c.target !== "string") {
                        var d = a(c.target).attr("id");
                        if (!d) {
                            d = f.getUID(b);
                            a(c.target).attr("id", d);
                        }
                        c.target = "#" + d;
                    }
                    f.typeCheckConfig(b, c, l);
                    return c;
                }
            }, {
                key: "_getScrollTop",
                value: function s() {
                    return this._scrollElement === window ? this._scrollElement.scrollY : this._scrollElement.scrollTop;
                }
            }, {
                key: "_getScrollHeight",
                value: function t() {
                    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
                }
            }, {
                key: "_process",
                value: function u() {
                    var a = this._getScrollTop() + this._config.offset;
                    var b = this._getScrollHeight();
                    var c = this._config.offset + b - this._scrollElement.offsetHeight;
                    if (this._scrollHeight !== b) {
                        this.refresh();
                    }
                    if (a >= c) {
                        var d = this._targets[this._targets.length - 1];
                        if (this._activeTarget !== d) {
                            this._activate(d);
                        }
                    }
                    if (this._activeTarget && a < this._offsets[0]) {
                        this._activeTarget = null;
                        this._clear();
                        return;
                    }
                    for (var e = this._offsets.length; e--; ) {
                        var f = this._activeTarget !== this._targets[e] && a >= this._offsets[e] && (this._offsets[e + 1] === undefined || a < this._offsets[e + 1]);
                        if (f) {
                            this._activate(this._targets[e]);
                        }
                    }
                }
            }, {
                key: "_activate",
                value: function v(b) {
                    this._activeTarget = b;
                    this._clear();
                    var c = this._selector.split(",");
                    c = c.map(function(a) {
                        return a + '[data-target="' + b + '"],' + (a + '[href="' + b + '"]');
                    });
                    var d = a(c.join(","));
                    if (d.hasClass(n.DROPDOWN_ITEM)) {
                        d.closest(o.DROPDOWN).find(o.DROPDOWN_TOGGLE).addClass(n.ACTIVE);
                        d.addClass(n.ACTIVE);
                    } else {
                        d.parents(o.LI).find(o.NAV_LINKS).addClass(n.ACTIVE);
                    }
                    a(this._scrollElement).trigger(m.ACTIVATE, {
                        relatedTarget: b
                    });
                }
            }, {
                key: "_clear",
                value: function w() {
                    a(this._selector).filter(o.ACTIVE).removeClass(n.ACTIVE);
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function x(b) {
                    return this.each(function() {
                        var c = a(this).data(g);
                        var d = typeof b === "object" && b || null;
                        if (!c) {
                            c = new i(this, d);
                            a(this).data(g, c);
                        }
                        if (typeof b === "string") {
                            if (c[b] === undefined) {
                                throw new Error('No method named "' + b + '"');
                            }
                            c[b]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function y() {
                    return d;
                }
            }, {
                key: "Default",
                get: function z() {
                    return k;
                }
            } ]);
            return i;
        }();
        a(window).on(m.LOAD_DATA_API, function() {
            var b = a.makeArray(a(o.DATA_SPY));
            for (var c = b.length; c--; ) {
                var d = a(b[c]);
                q._jQueryInterface.call(d, d.data());
            }
        });
        a.fn[b] = q._jQueryInterface;
        a.fn[b].Constructor = q;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return q._jQueryInterface;
        };
        return q;
    }(jQuery);
    var n = function(a) {
        var b = "tab";
        var d = "4.0.0-alpha";
        var g = "bs.tab";
        var h = "." + g;
        var i = ".data-api";
        var j = a.fn[b];
        var k = 150;
        var l = {
            HIDE: "hide" + h,
            HIDDEN: "hidden" + h,
            SHOW: "show" + h,
            SHOWN: "shown" + h,
            CLICK_DATA_API: "click" + h + i
        };
        var m = {
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active",
            FADE: "fade",
            IN: "in"
        };
        var n = {
            A: "a",
            LI: "li",
            DROPDOWN: ".dropdown",
            UL: "ul:not(.dropdown-menu)",
            FADE_CHILD: "> .nav-item .fade, > .fade",
            ACTIVE: ".active",
            ACTIVE_CHILD: "> .nav-item > .active, > .active",
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"]',
            DROPDOWN_TOGGLE: ".dropdown-toggle",
            DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
        };
        var o = function() {
            function b(a) {
                e(this, b);
                this._element = a;
            }
            c(b, [ {
                key: "show",
                value: function h() {
                    var b = this;
                    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && a(this._element).hasClass(m.ACTIVE)) {
                        return;
                    }
                    var c = undefined;
                    var d = undefined;
                    var e = a(this._element).closest(n.UL)[0];
                    var g = f.getSelectorFromElement(this._element);
                    if (e) {
                        d = a.makeArray(a(e).find(n.ACTIVE));
                        d = d[d.length - 1];
                    }
                    var h = a.Event(l.HIDE, {
                        relatedTarget: this._element
                    });
                    var i = a.Event(l.SHOW, {
                        relatedTarget: d
                    });
                    if (d) {
                        a(d).trigger(h);
                    }
                    a(this._element).trigger(i);
                    if (i.isDefaultPrevented() || h.isDefaultPrevented()) {
                        return;
                    }
                    if (g) {
                        c = a(g)[0];
                    }
                    this._activate(this._element, e);
                    var j = function k() {
                        var c = a.Event(l.HIDDEN, {
                            relatedTarget: b._element
                        });
                        var e = a.Event(l.SHOWN, {
                            relatedTarget: d
                        });
                        a(d).trigger(c);
                        a(b._element).trigger(e);
                    };
                    if (c) {
                        this._activate(c, c.parentNode, j);
                    } else {
                        j();
                    }
                }
            }, {
                key: "dispose",
                value: function i() {
                    a.removeClass(this._element, g);
                    this._element = null;
                }
            }, {
                key: "_activate",
                value: function j(b, c, d) {
                    var e = a(c).find(n.ACTIVE_CHILD)[0];
                    var g = d && f.supportsTransitionEnd() && (e && a(e).hasClass(m.FADE) || Boolean(a(c).find(n.FADE_CHILD)[0]));
                    var h = a.proxy(this._transitionComplete, this, b, e, g, d);
                    if (e && g) {
                        a(e).one(f.TRANSITION_END, h).emulateTransitionEnd(k);
                    } else {
                        h();
                    }
                    if (e) {
                        a(e).removeClass(m.IN);
                    }
                }
            }, {
                key: "_transitionComplete",
                value: function o(b, c, d, e) {
                    if (c) {
                        a(c).removeClass(m.ACTIVE);
                        var g = a(c).find(n.DROPDOWN_ACTIVE_CHILD)[0];
                        if (g) {
                            a(g).removeClass(m.ACTIVE);
                        }
                        c.setAttribute("aria-expanded", false);
                    }
                    a(b).addClass(m.ACTIVE);
                    b.setAttribute("aria-expanded", true);
                    if (d) {
                        f.reflow(b);
                        a(b).addClass(m.IN);
                    } else {
                        a(b).removeClass(m.FADE);
                    }
                    if (b.parentNode && a(b.parentNode).hasClass(m.DROPDOWN_MENU)) {
                        var h = a(b).closest(n.DROPDOWN)[0];
                        if (h) {
                            a(h).find(n.DROPDOWN_TOGGLE).addClass(m.ACTIVE);
                        }
                        b.setAttribute("aria-expanded", true);
                    }
                    if (e) {
                        e();
                    }
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function p(c) {
                    return this.each(function() {
                        var d = a(this);
                        var e = d.data(g);
                        if (!e) {
                            e = e = new b(this);
                            d.data(g, e);
                        }
                        if (typeof c === "string") {
                            if (e[c] === undefined) {
                                throw new Error('No method named "' + c + '"');
                            }
                            e[c]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function q() {
                    return d;
                }
            } ]);
            return b;
        }();
        a(document).on(l.CLICK_DATA_API, n.DATA_TOGGLE, function(b) {
            b.preventDefault();
            o._jQueryInterface.call(a(this), "show");
        });
        a.fn[b] = o._jQueryInterface;
        a.fn[b].Constructor = o;
        a.fn[b].noConflict = function() {
            a.fn[b] = j;
            return o._jQueryInterface;
        };
        return o;
    }(jQuery);
    var o = function(a) {
        if (window.Tether === undefined) {
            throw new Error("Bootstrap tooltips require Tether (http://github.hubspot.com/tether/)");
        }
        var b = "tooltip";
        var d = "4.0.0-alpha";
        var g = "bs.tooltip";
        var h = "." + g;
        var i = a.fn[b];
        var j = 150;
        var k = "bs-tether";
        var l = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: "0 0",
            constraints: []
        };
        var m = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "string",
            constraints: "array"
        };
        var n = {
            TOP: "bottom center",
            RIGHT: "middle left",
            BOTTOM: "top center",
            LEFT: "middle right"
        };
        var o = {
            IN: "in",
            OUT: "out"
        };
        var p = {
            HIDE: "hide" + h,
            HIDDEN: "hidden" + h,
            SHOW: "show" + h,
            SHOWN: "shown" + h,
            INSERTED: "inserted" + h,
            CLICK: "click" + h,
            FOCUSIN: "focusin" + h,
            FOCUSOUT: "focusout" + h,
            MOUSEENTER: "mouseenter" + h,
            MOUSELEAVE: "mouseleave" + h
        };
        var q = {
            FADE: "fade",
            IN: "in"
        };
        var r = {
            TOOLTIP: ".tooltip",
            TOOLTIP_INNER: ".tooltip-inner"
        };
        var s = {
            element: false,
            enabled: false
        };
        var t = {
            HOVER: "hover",
            FOCUS: "focus",
            CLICK: "click",
            MANUAL: "manual"
        };
        var u = function() {
            function i(a, b) {
                e(this, i);
                this._isEnabled = true;
                this._timeout = 0;
                this._hoverState = "";
                this._activeTrigger = {};
                this._tether = null;
                this.element = a;
                this.config = this._getConfig(b);
                this.tip = null;
                this._setListeners();
            }
            c(i, [ {
                key: "enable",
                value: function u() {
                    this._isEnabled = true;
                }
            }, {
                key: "disable",
                value: function v() {
                    this._isEnabled = false;
                }
            }, {
                key: "toggleEnabled",
                value: function w() {
                    this._isEnabled = !this._isEnabled;
                }
            }, {
                key: "toggle",
                value: function x(b) {
                    if (b) {
                        var c = this.constructor.DATA_KEY;
                        var d = a(b.currentTarget).data(c);
                        if (!d) {
                            d = new this.constructor(b.currentTarget, this._getDelegateConfig());
                            a(b.currentTarget).data(c, d);
                        }
                        d._activeTrigger.click = !d._activeTrigger.click;
                        if (d._isWithActiveTrigger()) {
                            d._enter(null, d);
                        } else {
                            d._leave(null, d);
                        }
                    } else {
                        if (a(this.getTipElement()).hasClass(q.IN)) {
                            this._leave(null, this);
                            return;
                        }
                        this._enter(null, this);
                    }
                }
            }, {
                key: "dispose",
                value: function y() {
                    clearTimeout(this._timeout);
                    this.cleanupTether();
                    a.removeData(this.element, this.constructor.DATA_KEY);
                    a(this.element).off(this.constructor.EVENT_KEY);
                    if (this.tip) {
                        a(this.tip).remove();
                    }
                    this._isEnabled = null;
                    this._timeout = null;
                    this._hoverState = null;
                    this._activeTrigger = null;
                    this._tether = null;
                    this.element = null;
                    this.config = null;
                    this.tip = null;
                }
            }, {
                key: "show",
                value: function z() {
                    var b = this;
                    var c = a.Event(this.constructor.Event.SHOW);
                    if (this.isWithContent() && this._isEnabled) {
                        a(this.element).trigger(c);
                        var d = a.contains(this.element.ownerDocument.documentElement, this.element);
                        if (c.isDefaultPrevented() || !d) {
                            return;
                        }
                        var e = this.getTipElement();
                        var g = f.getUID(this.constructor.NAME);
                        e.setAttribute("id", g);
                        this.element.setAttribute("aria-describedby", g);
                        this.setContent();
                        if (this.config.animation) {
                            a(e).addClass(q.FADE);
                        }
                        var h = typeof this.config.placement === "function" ? this.config.placement.call(this, e, this.element) : this.config.placement;
                        var j = this._getAttachment(h);
                        a(e).data(this.constructor.DATA_KEY, this).appendTo(document.body);
                        a(this.element).trigger(this.constructor.Event.INSERTED);
                        this._tether = new Tether({
                            attachment: j,
                            element: e,
                            target: this.element,
                            classes: s,
                            classPrefix: k,
                            offset: this.config.offset,
                            constraints: this.config.constraints,
                            addTargetClasses: false
                        });
                        f.reflow(e);
                        this._tether.position();
                        a(e).addClass(q.IN);
                        var l = function m() {
                            var c = b._hoverState;
                            b._hoverState = null;
                            a(b.element).trigger(b.constructor.Event.SHOWN);
                            if (c === o.OUT) {
                                b._leave(null, b);
                            }
                        };
                        if (f.supportsTransitionEnd() && a(this.tip).hasClass(q.FADE)) {
                            a(this.tip).one(f.TRANSITION_END, l).emulateTransitionEnd(i._TRANSITION_DURATION);
                            return;
                        }
                        l();
                    }
                }
            }, {
                key: "hide",
                value: function A(b) {
                    var c = this;
                    var d = this.getTipElement();
                    var e = a.Event(this.constructor.Event.HIDE);
                    var g = function h() {
                        if (c._hoverState !== o.IN && d.parentNode) {
                            d.parentNode.removeChild(d);
                        }
                        c.element.removeAttribute("aria-describedby");
                        a(c.element).trigger(c.constructor.Event.HIDDEN);
                        c.cleanupTether();
                        if (b) {
                            b();
                        }
                    };
                    a(this.element).trigger(e);
                    if (e.isDefaultPrevented()) {
                        return;
                    }
                    a(d).removeClass(q.IN);
                    if (f.supportsTransitionEnd() && a(this.tip).hasClass(q.FADE)) {
                        a(d).one(f.TRANSITION_END, g).emulateTransitionEnd(j);
                    } else {
                        g();
                    }
                    this._hoverState = "";
                }
            }, {
                key: "isWithContent",
                value: function B() {
                    return Boolean(this.getTitle());
                }
            }, {
                key: "getTipElement",
                value: function C() {
                    return this.tip = this.tip || a(this.config.template)[0];
                }
            }, {
                key: "setContent",
                value: function D() {
                    var b = a(this.getTipElement());
                    this.setElementContent(b.find(r.TOOLTIP_INNER), this.getTitle());
                    b.removeClass(q.FADE).removeClass(q.IN);
                    this.cleanupTether();
                }
            }, {
                key: "setElementContent",
                value: function E(b, c) {
                    var d = this.config.html;
                    if (typeof c === "object" && (c.nodeType || c.jquery)) {
                        if (d) {
                            if (!a(c).parent().is(b)) {
                                b.empty().append(c);
                            }
                        } else {
                            b.text(a(c).text());
                        }
                    } else {
                        b[d ? "html" : "text"](c);
                    }
                }
            }, {
                key: "getTitle",
                value: function F() {
                    var a = this.element.getAttribute("data-original-title");
                    if (!a) {
                        a = typeof this.config.title === "function" ? this.config.title.call(this.element) : this.config.title;
                    }
                    return a;
                }
            }, {
                key: "cleanupTether",
                value: function G() {
                    if (this._tether) {
                        this._tether.destroy();
                    }
                }
            }, {
                key: "_getAttachment",
                value: function H(a) {
                    return n[a.toUpperCase()];
                }
            }, {
                key: "_setListeners",
                value: function I() {
                    var b = this;
                    var c = this.config.trigger.split(" ");
                    c.forEach(function(c) {
                        if (c === "click") {
                            a(b.element).on(b.constructor.Event.CLICK, b.config.selector, a.proxy(b.toggle, b));
                        } else if (c !== t.MANUAL) {
                            var d = c === t.HOVER ? b.constructor.Event.MOUSEENTER : b.constructor.Event.FOCUSIN;
                            var e = c === t.HOVER ? b.constructor.Event.MOUSELEAVE : b.constructor.Event.FOCUSOUT;
                            a(b.element).on(d, b.config.selector, a.proxy(b._enter, b)).on(e, b.config.selector, a.proxy(b._leave, b));
                        }
                    });
                    if (this.config.selector) {
                        this.config = a.extend({}, this.config, {
                            trigger: "manual",
                            selector: ""
                        });
                    } else {
                        this._fixTitle();
                    }
                }
            }, {
                key: "_fixTitle",
                value: function J() {
                    var a = typeof this.element.getAttribute("data-original-title");
                    if (this.element.getAttribute("title") || a !== "string") {
                        this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
                        this.element.setAttribute("title", "");
                    }
                }
            }, {
                key: "_enter",
                value: function K(b, c) {
                    var d = this.constructor.DATA_KEY;
                    c = c || a(b.currentTarget).data(d);
                    if (!c) {
                        c = new this.constructor(b.currentTarget, this._getDelegateConfig());
                        a(b.currentTarget).data(d, c);
                    }
                    if (b) {
                        c._activeTrigger[b.type === "focusin" ? t.FOCUS : t.HOVER] = true;
                    }
                    if (a(c.getTipElement()).hasClass(q.IN) || c._hoverState === o.IN) {
                        c._hoverState = o.IN;
                        return;
                    }
                    clearTimeout(c._timeout);
                    c._hoverState = o.IN;
                    if (!c.config.delay || !c.config.delay.show) {
                        c.show();
                        return;
                    }
                    c._timeout = setTimeout(function() {
                        if (c._hoverState === o.IN) {
                            c.show();
                        }
                    }, c.config.delay.show);
                }
            }, {
                key: "_leave",
                value: function L(b, c) {
                    var d = this.constructor.DATA_KEY;
                    c = c || a(b.currentTarget).data(d);
                    if (!c) {
                        c = new this.constructor(b.currentTarget, this._getDelegateConfig());
                        a(b.currentTarget).data(d, c);
                    }
                    if (b) {
                        c._activeTrigger[b.type === "focusout" ? t.FOCUS : t.HOVER] = false;
                    }
                    if (c._isWithActiveTrigger()) {
                        return;
                    }
                    clearTimeout(c._timeout);
                    c._hoverState = o.OUT;
                    if (!c.config.delay || !c.config.delay.hide) {
                        c.hide();
                        return;
                    }
                    c._timeout = setTimeout(function() {
                        if (c._hoverState === o.OUT) {
                            c.hide();
                        }
                    }, c.config.delay.hide);
                }
            }, {
                key: "_isWithActiveTrigger",
                value: function M() {
                    for (var a in this._activeTrigger) {
                        if (this._activeTrigger[a]) {
                            return true;
                        }
                    }
                    return false;
                }
            }, {
                key: "_getConfig",
                value: function N(c) {
                    c = a.extend({}, this.constructor.Default, a(this.element).data(), c);
                    if (c.delay && typeof c.delay === "number") {
                        c.delay = {
                            show: c.delay,
                            hide: c.delay
                        };
                    }
                    f.typeCheckConfig(b, c, this.constructor.DefaultType);
                    return c;
                }
            }, {
                key: "_getDelegateConfig",
                value: function O() {
                    var a = {};
                    if (this.config) {
                        for (var b in this.config) {
                            if (this.constructor.Default[b] !== this.config[b]) {
                                a[b] = this.config[b];
                            }
                        }
                    }
                    return a;
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function P(b) {
                    return this.each(function() {
                        var c = a(this).data(g);
                        var d = typeof b === "object" ? b : null;
                        if (!c && /destroy|hide/.test(b)) {
                            return;
                        }
                        if (!c) {
                            c = new i(this, d);
                            a(this).data(g, c);
                        }
                        if (typeof b === "string") {
                            if (c[b] === undefined) {
                                throw new Error('No method named "' + b + '"');
                            }
                            c[b]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function Q() {
                    return d;
                }
            }, {
                key: "Default",
                get: function R() {
                    return l;
                }
            }, {
                key: "NAME",
                get: function S() {
                    return b;
                }
            }, {
                key: "DATA_KEY",
                get: function T() {
                    return g;
                }
            }, {
                key: "Event",
                get: function U() {
                    return p;
                }
            }, {
                key: "EVENT_KEY",
                get: function V() {
                    return h;
                }
            }, {
                key: "DefaultType",
                get: function W() {
                    return m;
                }
            } ]);
            return i;
        }();
        a.fn[b] = u._jQueryInterface;
        a.fn[b].Constructor = u;
        a.fn[b].noConflict = function() {
            a.fn[b] = i;
            return u._jQueryInterface;
        };
        return u;
    }(jQuery);
    var p = function(a) {
        var f = "popover";
        var g = "4.0.0-alpha";
        var h = "bs.popover";
        var i = "." + h;
        var j = a.fn[f];
        var k = a.extend({}, o.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-title"></h3>' + '<div class="popover-content"></div></div>'
        });
        var l = a.extend({}, o.DefaultType, {
            content: "(string|element|function)"
        });
        var m = {
            FADE: "fade",
            IN: "in"
        };
        var n = {
            TITLE: ".popover-title",
            CONTENT: ".popover-content",
            ARROW: ".popover-arrow"
        };
        var p = {
            HIDE: "hide" + i,
            HIDDEN: "hidden" + i,
            SHOW: "show" + i,
            SHOWN: "shown" + i,
            INSERTED: "inserted" + i,
            CLICK: "click" + i,
            FOCUSIN: "focusin" + i,
            FOCUSOUT: "focusout" + i,
            MOUSEENTER: "mouseenter" + i,
            MOUSELEAVE: "mouseleave" + i
        };
        var q = function(j) {
            d(o, j);
            function o() {
                e(this, o);
                b(Object.getPrototypeOf(o.prototype), "constructor", this).apply(this, arguments);
            }
            c(o, [ {
                key: "isWithContent",
                value: function q() {
                    return this.getTitle() || this._getContent();
                }
            }, {
                key: "getTipElement",
                value: function r() {
                    return this.tip = this.tip || a(this.config.template)[0];
                }
            }, {
                key: "setContent",
                value: function s() {
                    var b = a(this.getTipElement());
                    this.setElementContent(b.find(n.TITLE), this.getTitle());
                    this.setElementContent(b.find(n.CONTENT), this._getContent());
                    b.removeClass(m.FADE).removeClass(m.IN);
                    this.cleanupTether();
                }
            }, {
                key: "_getContent",
                value: function t() {
                    return this.element.getAttribute("data-content") || (typeof this.config.content === "function" ? this.config.content.call(this.element) : this.config.content);
                }
            } ], [ {
                key: "_jQueryInterface",
                value: function u(b) {
                    return this.each(function() {
                        var c = a(this).data(h);
                        var d = typeof b === "object" ? b : null;
                        if (!c && /destroy|hide/.test(b)) {
                            return;
                        }
                        if (!c) {
                            c = new o(this, d);
                            a(this).data(h, c);
                        }
                        if (typeof b === "string") {
                            if (c[b] === undefined) {
                                throw new Error('No method named "' + b + '"');
                            }
                            c[b]();
                        }
                    });
                }
            }, {
                key: "VERSION",
                get: function v() {
                    return g;
                }
            }, {
                key: "Default",
                get: function w() {
                    return k;
                }
            }, {
                key: "NAME",
                get: function x() {
                    return f;
                }
            }, {
                key: "DATA_KEY",
                get: function y() {
                    return h;
                }
            }, {
                key: "Event",
                get: function z() {
                    return p;
                }
            }, {
                key: "EVENT_KEY",
                get: function A() {
                    return i;
                }
            }, {
                key: "DefaultType",
                get: function B() {
                    return l;
                }
            } ]);
            return o;
        }(o);
        a.fn[f] = q._jQueryInterface;
        a.fn[f].Constructor = q;
        a.fn[f].noConflict = function() {
            a.fn[f] = j;
            return q._jQueryInterface;
        };
        return q;
    }(jQuery);
}(jQuery);

"use strict";

(function() {
    jQuery(document).ready(function(a) {
        a("button.hamburger").click(function() {
            a(this).toggleClass("is-active");
            window.console && window.console.log && console.log("TOGGLING HAMBURGER");
        });
    });
})(jQuery);

"use strict";

(function() {
    jQuery(document).ready(function(b) {
        window.console && window.console.log && console.log("DOCUMENT READY");
        a();
    });
    jQuery(window).load(function(a) {
        window.console && window.console.log && console.log("WINDOW LOADED");
    });
    var a = function() {
        var a = Math.max(document.documentElement.clientWidth, window.innerWidth || 0), b = parseFloat(window.getComputedStyle(document.querySelector("html"), null).getPropertyValue("font-size")), c = "xs", d = Math.round(1 / b * 1e3) / 1e3, e = {};
        if (a >= 544 && a < 768) {
            c = "sm";
        } else if (a >= 768 && a < 992) {
            c = "md";
        } else if (a >= 992 && a < 1200) {
            c = "lg";
        } else if (a >= 1200) {
            c = "xl";
        }
        e = {
            viewportWidth: a,
            remInPixel: b,
            pixelInRem: d,
            gridClass: c
        };
        window.console && window.console.log && console.log(e);
        return e;
    };
})(jQuery);

"use strict";

(function() {
    jQuery(document).ready(function(a) {
        a('[data-toggle="offcanvas"]').click(function() {
            a(".row-offcanvas").toggleClass("active");
            window.console && window.console.log && console.log("TOGGLING OFFCANVAS");
        });
    });
})(jQuery);

"use strict";

(function() {
    jQuery(window).load(function() {
        var a = jQuery("body");
        if (a.hasClass("fixed-footer")) {
            var b = jQuery("footer.main"), c = jQuery("html"), d = b.outerHeight();
            window.console && window.console.log && console.log("STICKY FOOTER INIT, HEIGHT: " + d);
            c.css({
                position: "relative",
                minHeight: "100%"
            });
            if (c.hasClass("admin-bar")) {
                var e = jQuery("#wpadminbar").height();
                c.css({
                    minHeight: "calc(100% - " + e + "px)"
                });
            }
            a.css({
                marginBottom: d + "px"
            });
            b.css({
                bottom: 0,
                height: d + "px",
                position: "absolute"
            });
        }
    });
})(jQuery);